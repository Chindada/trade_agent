include:
    - template: SAST.gitlab-ci.yml

variables:
    DOCKER_DRIVER: overlay2
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

stages:
    - lint
    - test
    - build
    - deployment

go-lint:
    # image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
    # docker run -it registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine bash
    # find / -name ".golangci.yml"
    # cat /golangci/.golangci.yml
    image: golangci/golangci-lint
    only:
        - main
    stage: lint
    script:
        # Use default .golangci.yml file from the image if one is not present in the project root.
        - "[ -e .golangci.yml ] || cp /golangci/.golangci.yml ."
        # Write the code coverage report to gl-code-quality-report.json
        # and print linting issues to stdout in the format: path/to/file:line description
        # remove `--issues-exit-code 0` or set to non-zero to fail the job if linting issues are detected
        - apt update && apt install -y jq
        - golangci-lint run --issues-exit-code 0 --out-format code-climate | tee gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
    artifacts:
        reports:
            codequality: gl-code-quality-report.json

go-build-test:
    image: golang:1.18.1-bullseye
    only:
        - main
    stage: test
    script:
        - go build -o trade_agent ./cmd

go-test:
    image: golang:1.18.1-bullseye
    only:
        - main
    stage: test
    allow_failure: true
    script:
        - export DEPLOYMENT=test
        - go install gotest.tools/gotestsum@latest
        - gotestsum --junitfile report.xml --format testname
        - go test -race $(go list ./... | grep -v /vendor/) -v -coverprofile=coverage.out -covermode=atomic
        - go tool cover -func=coverage.out
    artifacts:
        when: always
        reports:
            junit: report.xml

docker_build:
    image: docker:latest
    only:
        - main
    stage: build
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
        - docker build -t $IMAGE_TAG .
        - docker push $IMAGE_TAG
        - docker rmi $IMAGE_TAG
        - docker system prune --volumes -f

docker-deploy:
    image: alpine:latest
    only:
        - main
    stage: deployment
    script:
        - chmod og= $ID_ED25519
        - apk update && apk add openssh-client
        - ssh -i $ID_ED25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
        - ssh -i $ID_ED25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $IMAGE_TAG"
        - ssh -i $ID_ED25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop trade_agent || true"
        - ssh -i $ID_ED25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker system prune --volumes -f"
        - |
            ssh -i $ID_ED25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run --name trade_agent \
            --network tocvlan \
            -v /$SERVER_USER/agent_logs:/trade_agent/logs \
            --ip=172.20.10.224 \
            --restart always \
            -e TZ="Asia/Taipei" \
            -dt $IMAGE_TAG"
    environment:
        name: review/$CI_COMMIT_REF_NAME
        on_stop: stop_production

stop_production:
    image: alpine:latest
    only:
        - main
    stage: deployment
    script:
        - chmod og= $ID_ED25519
        - apk update && apk add openssh-client
        - ssh -i $ID_ED25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cd /$SERVER_USER/agent_logs && tar -czvPf /trade_agent_logs_$CI_COMMIT_SHORT_SHA.tgz ./*"
        - ssh -i $ID_ED25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "rm -rf /$SERVER_USER/agent_logs || true"
        - scp -i $ID_ED25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP:/trade_agent_logs_$CI_COMMIT_SHORT_SHA.tgz trade_agent_logs_$CI_COMMIT_SHORT_SHA.tgz
        - ssh -i $ID_ED25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "rm -rf /trade_agent_logs_$CI_COMMIT_SHORT_SHA.tgz || true"
        - ssh -i $ID_ED25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop trade_agent"
        - ssh -i $ID_ED25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker system prune --volumes -f"
        - ssh -i $ID_ED25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker rmi $IMAGE_TAG"
    when: manual
    environment:
        name: review/$CI_COMMIT_REF_NAME
        action: stop
    artifacts:
        paths:
            - trade_agent_logs_$CI_COMMIT_SHORT_SHA.tgz
        expire_in: 2 week
