digraph gocallvis {
    label="trade_agent/cmd";
    labeljust="l";
    fontname="Arial";
    fontsize="14";
    rankdir="LR";
    bgcolor="lightgray";
    style="solid";
    penwidth="0.5";
    pad="0.0";
    nodesep="0.35";

    node [shape="ellipse" style="filled" fillcolor="honeydew" fontname="Verdana" penwidth="1.0" margin="0.05,0.0"];
    edge [minlen="5"]

    subgraph "cluster_focus" {
        labeljust="c";
fontsize="18";
bgcolor="#e6ecfa";
label="order";
labelloc="t";
        
        "trade_agent/pkg/modules/order.orderStausCallback" [ fillcolor="lightblue" label="orderStausCallback" penwidth="0.5" ]
        "trade_agent/pkg/modules/order.displayOrderResult" [ fillcolor="lightblue" label="displayOrderResult" penwidth="0.5" ]
        "trade_agent/pkg/modules/order.subOrderStatus" [ fillcolor="lightblue" label="subOrderStatus" penwidth="0.5" ]
        "trade_agent/pkg/modules/order.subOrderStatus$1" [ fillcolor="lightblue" label="subOrderStatus$1" style="dotted,filled" ]
        "trade_agent/pkg/modules/order.updateTradeBalance" [ fillcolor="lightblue" label="updateTradeBalance" penwidth="0.5" ]
        "trade_agent/pkg/modules/order.subOrderStatus$2" [ fillcolor="lightblue" label="subOrderStatus$2" style="dotted,filled" ]
        "trade_agent/pkg/modules/order.InitOrder" [ penwidth="1.5" fillcolor="lightblue" label="InitOrder" ]
        "trade_agent/pkg/modules/order.clearAllUnFinished" [ label="clearAllUnFinished" penwidth="0.5" fillcolor="lightblue" ]
        "trade_agent/pkg/modules/order.getQuantityByBiasRate" [ fillcolor="lightblue" label="getQuantityByBiasRate" penwidth="0.5" ]
        "trade_agent/pkg/modules/order.checkWaitingOrder" [ fillcolor="lightblue" label="checkWaitingOrder" penwidth="0.5" ]
        "trade_agent/pkg/modules/order.isOrderNeedCancelAgain" [ fillcolor="lightblue" label="isOrderNeedCancelAgain" penwidth="0.5" ]
        "trade_agent/pkg/modules/order.checkSwitch" [ fillcolor="lightblue" label="checkSwitch" penwidth="0.5" ]
        "trade_agent/pkg/modules/order.orderCallback" [ fillcolor="lightblue" label="orderCallback" penwidth="0.5" ]
        
        subgraph "cluster_compress/flate" {
        fontname="Tahoma bold";
label="compress/flate";
penwidth="0.8";
fontsize="16";
fillcolor="#E0FFE1";
tooltip="package: compress/flate";
style="filled";
rank="sink";
URL="/?f=compress/flate";
        
        
        subgraph "cluster_compress/flate.CorruptInputError" {
        labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(CorruptInputError)";
tooltip="type: compress/flate.CorruptInputError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
        
        "(compress/flate.CorruptInputError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_compress/flate.InternalError" {
        fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(InternalError)";
tooltip="type: compress/flate.InternalError";
penwidth="0.5";
fontsize="15";
        
        "(compress/flate.InternalError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_context" {
        label="context";
tooltip="package: context";
fontsize="16";
fillcolor="#E0FFE1";
fontname="Tahoma bold";
rank="sink";
penwidth="0.8";
style="filled";
URL="/?f=context";
        
        
        subgraph "cluster_context.deadlineExceededError" {
        penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(deadlineExceededError)";
tooltip="type: context.deadlineExceededError";
        
        "(context.deadlineExceededError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_crypto/aes" {
        fillcolor="#E0FFE1";
rank="sink";
label="crypto/aes";
URL="/?f=crypto/aes";
tooltip="package: crypto/aes";
penwidth="0.8";
fontsize="16";
style="filled";
fontname="Tahoma bold";
        
        
        subgraph "cluster_crypto/aes.KeySizeError" {
        fillcolor="#c2e3c2";
label="(KeySizeError)";
tooltip="type: crypto/aes.KeySizeError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
        
        "(crypto/aes.KeySizeError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_crypto/tls" {
        style="filled";
fillcolor="#E0FFE1";
fontname="Tahoma bold";
URL="/?f=crypto/tls";
tooltip="package: crypto/tls";
fontsize="16";
rank="sink";
label="crypto/tls";
penwidth="0.8";
        
        
        subgraph "cluster_*crypto/tls.permanentError" {
        style="rounded,filled";
fillcolor="#c2e3c2";
label="(*permanentError)";
tooltip="type: *crypto/tls.permanentError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
        
        "(*crypto/tls.permanentError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_crypto/tls.RecordHeaderError" {
        penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(RecordHeaderError)";
tooltip="type: crypto/tls.RecordHeaderError";
        
        "(crypto/tls.RecordHeaderError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_crypto/tls.alert" {
        labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(alert)";
tooltip="type: crypto/tls.alert";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
        
        "(crypto/tls.alert).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_crypto/x509" {
        fillcolor="#E0FFE1";
rank="sink";
label="crypto/x509";
tooltip="package: crypto/x509";
penwidth="0.8";
style="filled";
URL="/?f=crypto/x509";
fontsize="16";
fontname="Tahoma bold";
        
        
        subgraph "cluster_crypto/x509.CertificateInvalidError" {
        tooltip="type: crypto/x509.CertificateInvalidError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(CertificateInvalidError)";
        
        "(crypto/x509.CertificateInvalidError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_crypto/x509.HostnameError" {
        fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(HostnameError)";
tooltip="type: crypto/x509.HostnameError";
penwidth="0.5";
        
        "(crypto/x509.HostnameError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_crypto/x509.SystemRootsError" {
        penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(SystemRootsError)";
tooltip="type: crypto/x509.SystemRootsError";
        
        "(crypto/x509.SystemRootsError).Error" [ label="Error" penwidth="1.5" fillcolor="#adedad" ]
        
    }

        subgraph "cluster_crypto/x509.UnhandledCriticalExtension" {
        tooltip="type: crypto/x509.UnhandledCriticalExtension";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(UnhandledCriticalExtension)";
        
        "(crypto/x509.UnhandledCriticalExtension).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_crypto/x509.UnknownAuthorityError" {
        style="rounded,filled";
fillcolor="#c2e3c2";
label="(UnknownAuthorityError)";
tooltip="type: crypto/x509.UnknownAuthorityError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
        
        "(crypto/x509.UnknownAuthorityError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_encoding/base64" {
        URL="/?f=encoding/base64";
tooltip="package: encoding/base64";
penwidth="0.8";
fontsize="16";
style="filled";
label="encoding/base64";
fillcolor="#E0FFE1";
fontname="Tahoma bold";
rank="sink";
        
        
        subgraph "cluster_encoding/base64.CorruptInputError" {
        label="(CorruptInputError)";
tooltip="type: encoding/base64.CorruptInputError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
        
        "(encoding/base64.CorruptInputError).Error" [ penwidth="1.5" fillcolor="#adedad" label="Error" ]
        
    }

    }

        subgraph "cluster_encoding/json" {
        penwidth="0.8";
rank="sink";
label="encoding/json";
tooltip="package: encoding/json";
URL="/?f=encoding/json";
fontsize="16";
style="filled";
fillcolor="#E0FFE1";
fontname="Tahoma bold";
        
        
        subgraph "cluster_*encoding/json.InvalidUnmarshalError" {
        labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(*InvalidUnmarshalError)";
tooltip="type: *encoding/json.InvalidUnmarshalError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
        
        "(*encoding/json.InvalidUnmarshalError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_*encoding/json.MarshalerError" {
        fillcolor="#c2e3c2";
label="(*MarshalerError)";
tooltip="type: *encoding/json.MarshalerError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
        
        "(*encoding/json.MarshalerError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_*encoding/json.SyntaxError" {
        fillcolor="#c2e3c2";
label="(*SyntaxError)";
tooltip="type: *encoding/json.SyntaxError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
        
        "(*encoding/json.SyntaxError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_*encoding/json.UnmarshalTypeError" {
        style="rounded,filled";
fillcolor="#c2e3c2";
label="(*UnmarshalTypeError)";
tooltip="type: *encoding/json.UnmarshalTypeError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
        
        "(*encoding/json.UnmarshalTypeError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_*encoding/json.UnsupportedTypeError" {
        fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(*UnsupportedTypeError)";
tooltip="type: *encoding/json.UnsupportedTypeError";
penwidth="0.5";
fontsize="15";
        
        "(*encoding/json.UnsupportedTypeError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_*encoding/json.UnsupportedValueError" {
        fillcolor="#c2e3c2";
label="(*UnsupportedValueError)";
tooltip="type: *encoding/json.UnsupportedValueError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
        
        "(*encoding/json.UnsupportedValueError).Error" [ penwidth="1.5" fillcolor="#adedad" label="Error" ]
        
    }

    }

        subgraph "cluster_encoding/xml" {
        penwidth="0.8";
fillcolor="#E0FFE1";
rank="sink";
URL="/?f=encoding/xml";
tooltip="package: encoding/xml";
fontsize="16";
style="filled";
fontname="Tahoma bold";
label="encoding/xml";
        
        
        subgraph "cluster_*encoding/xml.SyntaxError" {
        style="rounded,filled";
fillcolor="#c2e3c2";
label="(*SyntaxError)";
tooltip="type: *encoding/xml.SyntaxError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
        
        "(*encoding/xml.SyntaxError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_*encoding/xml.TagPathError" {
        penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(*TagPathError)";
tooltip="type: *encoding/xml.TagPathError";
        
        "(*encoding/xml.TagPathError).Error" [ label="Error" penwidth="1.5" fillcolor="#adedad" ]
        
    }

        subgraph "cluster_*encoding/xml.UnsupportedTypeError" {
        fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(*UnsupportedTypeError)";
tooltip="type: *encoding/xml.UnsupportedTypeError";
penwidth="0.5";
        
        "(*encoding/xml.UnsupportedTypeError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_encoding/xml.UnmarshalError" {
        fillcolor="#c2e3c2";
label="(UnmarshalError)";
tooltip="type: encoding/xml.UnmarshalError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
        
        "(encoding/xml.UnmarshalError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_errors" {
        style="filled";
fillcolor="#E0FFE1";
label="errors";
URL="/?f=errors";
fontsize="16";
fontname="Tahoma bold";
rank="sink";
tooltip="package: errors";
penwidth="0.8";
        
        
        subgraph "cluster_*errors.errorString" {
        fillcolor="#c2e3c2";
label="(*errorString)";
tooltip="type: *errors.errorString";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
        
        "(*errors.errorString).Error" [ label="Error" penwidth="1.5" fillcolor="#adedad" ]
        
    }

    }

        subgraph "cluster_fmt" {
        fontsize="16";
style="filled";
fillcolor="#E0FFE1";
rank="sink";
tooltip="package: fmt";
penwidth="0.8";
fontname="Tahoma bold";
label="fmt";
URL="/?f=fmt";
        
        
        subgraph "cluster_*fmt.wrapError" {
        fillcolor="#c2e3c2";
label="(*wrapError)";
tooltip="type: *fmt.wrapError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
        
        "(*fmt.wrapError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_github.com/eclipse/paho.mqtt.golang" {
        fontname="Tahoma bold";
URL="/?f=github.com/eclipse/paho.mqtt.golang";
tooltip="package: github.com/eclipse/paho.mqtt.golang";
penwidth="0.8";
style="filled";
fillcolor="lightyellow";
fontsize="16";
rank="sink";
label="mqtt";
        
        
        subgraph "cluster_*github.com/eclipse/paho.mqtt.golang.message" {
        style="rounded,filled";
fillcolor="wheat2";
label="(*message)";
tooltip="type: *github.com/eclipse/paho.mqtt.golang.message";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
        
        "(*github.com/eclipse/paho.mqtt.golang.message).Payload" [ fillcolor="moccasin" label="Payload" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_github.com/go-resty/resty/v2" {
        fontsize="16";
style="filled";
fillcolor="lightyellow";
fontname="Tahoma bold";
rank="sink";
label="resty";
URL="/?f=github.com/go-resty/resty/v2";
penwidth="0.8";
tooltip="package: github.com/go-resty/resty/v2";
        
        
        subgraph "cluster_*github.com/go-resty/resty/v2.noRetryErr" {
        fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="wheat2";
label="(*noRetryErr)";
tooltip="type: *github.com/go-resty/resty/v2.noRetryErr";
penwidth="0.5";
        
        "(*github.com/go-resty/resty/v2.noRetryErr).Error" [ fillcolor="moccasin" label="Error" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_github.com/gorilla/websocket" {
        penwidth="0.8";
style="filled";
fillcolor="lightyellow";
fontname="Tahoma bold";
fontsize="16";
rank="sink";
label="websocket";
URL="/?f=github.com/gorilla/websocket";
tooltip="package: github.com/gorilla/websocket";
        
        
        subgraph "cluster_*github.com/gorilla/websocket.CloseError" {
        style="rounded,filled";
fillcolor="wheat2";
label="(*CloseError)";
tooltip="type: *github.com/gorilla/websocket.CloseError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
        
        "(*github.com/gorilla/websocket.CloseError).Error" [ fillcolor="moccasin" label="Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_*github.com/gorilla/websocket.netError" {
        fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="wheat2";
label="(*netError)";
tooltip="type: *github.com/gorilla/websocket.netError";
penwidth="0.5";
fontsize="15";
        
        "(*github.com/gorilla/websocket.netError).Error" [ penwidth="1.5" fillcolor="moccasin" label="Error" ]
        
    }

    }

        subgraph "cluster_github.com/jackc/pgx/v4" {
        fillcolor="lightyellow";
fontname="Tahoma bold";
rank="sink";
label="pgx";
URL="/?f=github.com/jackc/pgx/v4";
penwidth="0.8";
fontsize="16";
style="filled";
tooltip="package: github.com/jackc/pgx/v4";
        
        
        subgraph "cluster_github.com/jackc/pgx/v4.SerializationError" {
        fillcolor="wheat2";
label="(SerializationError)";
tooltip="type: github.com/jackc/pgx/v4.SerializationError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
        
        "(github.com/jackc/pgx/v4.SerializationError).Error" [ fillcolor="moccasin" label="Error" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_github.com/sirupsen/logrus" {
        label="logrus";
fontsize="16";
style="filled";
fillcolor="lightyellow";
fontname="Tahoma bold";
penwidth="0.8";
rank="sink";
URL="/?f=github.com/sirupsen/logrus";
tooltip="package: github.com/sirupsen/logrus";
        
        
        subgraph "cluster_*github.com/sirupsen/logrus.Entry" {
        fillcolor="wheat2";
label="(*Entry)";
tooltip="type: *github.com/sirupsen/logrus.Entry";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
        
        "(*github.com/sirupsen/logrus.Entry).Infof" [ fillcolor="moccasin" label="Infof" penwidth="1.5" ]
        "(*github.com/sirupsen/logrus.Entry).Error" [ fillcolor="moccasin" label="Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_*github.com/sirupsen/logrus.Logger" {
        label="(*Logger)";
tooltip="type: *github.com/sirupsen/logrus.Logger";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="wheat2";
        
        "(*github.com/sirupsen/logrus.Logger).Panic" [ penwidth="1.5" fillcolor="moccasin" label="Panic" ]
        "(*github.com/sirupsen/logrus.Logger).WithFields" [ label="WithFields" penwidth="1.5" fillcolor="moccasin" ]
        "(*github.com/sirupsen/logrus.Logger).Error" [ fillcolor="moccasin" label="Error" penwidth="1.5" ]
        "(*github.com/sirupsen/logrus.Logger).Info" [ penwidth="1.5" fillcolor="moccasin" label="Info" ]
        "(*github.com/sirupsen/logrus.Logger).Warn" [ fillcolor="moccasin" label="Warn" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_internal/poll" {
        tooltip="package: internal/poll";
penwidth="0.8";
style="filled";
fillcolor="#E0FFE1";
rank="sink";
label="internal/poll";
fontsize="16";
fontname="Tahoma bold";
URL="/?f=internal/poll";
        
        
        subgraph "cluster_*internal/poll.DeadlineExceededError" {
        style="rounded,filled";
fillcolor="#c2e3c2";
label="(*DeadlineExceededError)";
tooltip="type: *internal/poll.DeadlineExceededError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
        
        "(*internal/poll.DeadlineExceededError).Error" [ label="Error" penwidth="1.5" fillcolor="#adedad" ]
        
    }

        subgraph "cluster_internal/poll.errNetClosing" {
        fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(errNetClosing)";
tooltip="type: internal/poll.errNetClosing";
penwidth="0.5";
        
        "(internal/poll.errNetClosing).Error" [ penwidth="1.5" fillcolor="#adedad" label="Error" ]
        
    }

    }

        subgraph "cluster_io/fs" {
        style="filled";
fillcolor="#E0FFE1";
rank="sink";
label="io/fs";
URL="/?f=io/fs";
fontsize="16";
fontname="Tahoma bold";
tooltip="package: io/fs";
penwidth="0.8";
        
        
        subgraph "cluster_*io/fs.PathError" {
        style="rounded,filled";
fillcolor="#c2e3c2";
label="(*PathError)";
tooltip="type: *io/fs.PathError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
        
        "(*io/fs.PathError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_net" {
        URL="/?f=net";
penwidth="0.8";
fontsize="16";
fontname="Tahoma bold";
label="net";
tooltip="package: net";
style="filled";
fillcolor="#E0FFE1";
rank="sink";
        
        
        subgraph "cluster_*net.DNSError" {
        fillcolor="#c2e3c2";
label="(*DNSError)";
tooltip="type: *net.DNSError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
        
        "(*net.DNSError).Error" [ penwidth="1.5" fillcolor="#adedad" label="Error" ]
        
    }

        subgraph "cluster_*net.OpError" {
        fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(*OpError)";
tooltip="type: *net.OpError";
penwidth="0.5";
fontsize="15";
        
        "(*net.OpError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_net/http" {
        style="filled";
fillcolor="#E0FFE1";
fontname="Tahoma bold";
rank="sink";
label="net/http";
tooltip="package: net/http";
penwidth="0.8";
fontsize="16";
URL="/?f=net/http";
        
        
        subgraph "cluster_*net/http.ProtocolError" {
        tooltip="type: *net/http.ProtocolError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(*ProtocolError)";
        
        "(*net/http.ProtocolError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_*net/http.http2httpError" {
        label="(*http2httpError)";
tooltip="type: *net/http.http2httpError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
        
        "(*net/http.http2httpError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_*net/http.httpError" {
        penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(*httpError)";
tooltip="type: *net/http.httpError";
        
        "(*net/http.httpError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_net/http.http2ConnectionError" {
        fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(http2ConnectionError)";
tooltip="type: net/http.http2ConnectionError";
penwidth="0.5";
        
        "(net/http.http2ConnectionError).Error" [ label="Error" penwidth="1.5" fillcolor="#adedad" ]
        
    }

        subgraph "cluster_net/http.http2GoAwayError" {
        label="(http2GoAwayError)";
tooltip="type: net/http.http2GoAwayError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
        
        "(net/http.http2GoAwayError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_net/http.http2StreamError" {
        fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(http2StreamError)";
tooltip="type: net/http.http2StreamError";
penwidth="0.5";
fontsize="15";
        
        "(net/http.http2StreamError).Error" [ label="Error" penwidth="1.5" fillcolor="#adedad" ]
        
    }

        subgraph "cluster_net/http.http2connError" {
        fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(http2connError)";
tooltip="type: net/http.http2connError";
penwidth="0.5";
        
        "(net/http.http2connError).Error" [ label="Error" penwidth="1.5" fillcolor="#adedad" ]
        
    }

    }

        subgraph "cluster_net/textproto" {
        fontsize="16";
style="filled";
rank="sink";
URL="/?f=net/textproto";
tooltip="package: net/textproto";
penwidth="0.8";
fontname="Tahoma bold";
label="net/textproto";
fillcolor="#E0FFE1";
        
        
        subgraph "cluster_net/textproto.ProtocolError" {
        tooltip="type: net/textproto.ProtocolError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(ProtocolError)";
        
        "(net/textproto.ProtocolError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_net/url" {
        penwidth="0.8";
label="net/url";
tooltip="package: net/url";
fontsize="16";
style="filled";
fillcolor="#E0FFE1";
fontname="Tahoma bold";
rank="sink";
URL="/?f=net/url";
        
        
        subgraph "cluster_*net/url.Error" {
        fillcolor="#c2e3c2";
label="(*Error)";
tooltip="type: *net/url.Error";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
        
        "(*net/url.Error).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_os" {
        fontsize="16";
label="os";
penwidth="0.8";
fillcolor="#E0FFE1";
fontname="Tahoma bold";
rank="sink";
URL="/?f=os";
tooltip="package: os";
style="filled";
        
        
        subgraph "cluster_*os.SyscallError" {
        label="(*SyscallError)";
tooltip="type: *os.SyscallError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
        
        "(*os.SyscallError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_strconv" {
        label="strconv";
tooltip="package: strconv";
penwidth="0.8";
fillcolor="#E0FFE1";
rank="sink";
URL="/?f=strconv";
fontsize="16";
style="filled";
fontname="Tahoma bold";
        
        
        subgraph "cluster_*strconv.NumError" {
        style="rounded,filled";
fillcolor="#c2e3c2";
label="(*NumError)";
tooltip="type: *strconv.NumError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
        
        "(*strconv.NumError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_sync" {
        fontsize="16";
rank="sink";
penwidth="0.8";
fillcolor="#E0FFE1";
fontname="Tahoma bold";
label="sync";
URL="/?f=sync";
tooltip="package: sync";
style="filled";
        
        
        subgraph "cluster_*sync.Mutex" {
        fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(*Mutex)";
tooltip="type: *sync.Mutex";
penwidth="0.5";
fontsize="15";
        
        "(*sync.Mutex).Unlock" [ fillcolor="#adedad" label="Unlock" penwidth="1.5" ]
        "(*sync.Mutex).Lock" [ fillcolor="#adedad" label="Lock" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_syscall" {
        penwidth="0.8";
fontsize="16";
fillcolor="#E0FFE1";
fontname="Tahoma bold";
rank="sink";
label="syscall";
URL="/?f=syscall";
tooltip="package: syscall";
style="filled";
        
        
        subgraph "cluster_syscall.Errno" {
        label="(Errno)";
tooltip="type: syscall.Errno";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
        
        "(syscall.Errno).Error" [ penwidth="1.5" fillcolor="#adedad" label="Error" ]
        
    }

    }

        subgraph "cluster_time" {
        penwidth="0.8";
URL="/?f=time";
fontsize="16";
style="filled";
fillcolor="#E0FFE1";
fontname="Tahoma bold";
rank="sink";
label="time";
tooltip="package: time";
        
        "time.Tick" [ fillcolor="#adedad" label="Tick" penwidth="1.5" ]
        "time.Sleep" [ fillcolor="#adedad" label="Sleep" penwidth="1.5" ]
        "time.Now" [ fillcolor="#adedad" label="Now" penwidth="1.5" ]
        
        subgraph "cluster_time.Time" {
        fillcolor="#c2e3c2";
label="(Time)";
tooltip="type: time.Time";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
        
        "(time.Time).Before" [ label="Before" penwidth="1.5" fillcolor="#adedad" ]
        "(time.Time).After" [ fillcolor="#adedad" label="After" penwidth="1.5" ]
        "(time.Time).Add" [ fillcolor="#adedad" label="Add" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_trade_agent/cmd" {
        fontsize="16";
fillcolor="lightyellow";
fontname="Tahoma bold";
rank="sink";
tooltip="package: trade_agent/cmd";
penwidth="0.8";
style="filled";
label="main";
URL="/?f=trade_agent/cmd";
        
        "trade_agent/cmd.main" [ fillcolor="moccasin" label="main" penwidth="0.5" ]
        
    }

        subgraph "cluster_trade_agent/pkg/cache" {
        fillcolor="lightyellow";
rank="sink";
label="cache";
URL="/?f=trade_agent/pkg/cache";
tooltip="package: trade_agent/pkg/cache";
penwidth="0.8";
fontsize="16";
style="filled";
fontname="Tahoma bold";
        
        "trade_agent/pkg/cache.GetCache" [ fillcolor="moccasin" label="GetCache" penwidth="1.5" ]
        
        subgraph "cluster_*trade_agent/pkg/cache.Cache" {
        style="rounded,filled";
fillcolor="wheat2";
label="(*Cache)";
tooltip="type: *trade_agent/pkg/cache.Cache";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
        
        "(*trade_agent/pkg/cache.Cache).GetOrderWaiting" [ fillcolor="moccasin" label="GetOrderWaiting" penwidth="1.5" ]
        "(*trade_agent/pkg/cache.Cache).SetOrderWaiting" [ label="SetOrderWaiting" penwidth="1.5" fillcolor="moccasin" ]
        "(*trade_agent/pkg/cache.Cache).AppendOrderBuy" [ penwidth="1.5" fillcolor="moccasin" label="AppendOrderBuy" ]
        "(*trade_agent/pkg/cache.Cache).AppendOrderForward" [ fillcolor="moccasin" label="AppendOrderForward" penwidth="1.5" ]
        "(*trade_agent/pkg/cache.Cache).AppendOrderSell" [ penwidth="1.5" fillcolor="moccasin" label="AppendOrderSell" ]
        "(*trade_agent/pkg/cache.Cache).AppendOrderSellFirst" [ label="AppendOrderSellFirst" penwidth="1.5" fillcolor="moccasin" ]
        "(*trade_agent/pkg/cache.Cache).AppendOrderReverse" [ fillcolor="moccasin" label="AppendOrderReverse" penwidth="1.5" ]
        "(*trade_agent/pkg/cache.Cache).AppendOrderBuyLater" [ fillcolor="moccasin" label="AppendOrderBuyLater" penwidth="1.5" ]
        "(*trade_agent/pkg/cache.Cache).GetOrderForward" [ fillcolor="moccasin" label="GetOrderForward" penwidth="1.5" ]
        "(*trade_agent/pkg/cache.Cache).GetOrderReverse" [ label="GetOrderReverse" penwidth="1.5" fillcolor="moccasin" ]
        "(*trade_agent/pkg/cache.Cache).GetTradeDay" [ fillcolor="moccasin" label="GetTradeDay" penwidth="1.5" ]
        "(*trade_agent/pkg/cache.Cache).GetTradeDayTradeOutEndTime" [ fillcolor="moccasin" label="GetTradeDayTradeOutEndTime" penwidth="1.5" ]
        "(*trade_agent/pkg/cache.Cache).GetTradeDayOpenEndTime" [ fillcolor="moccasin" label="GetTradeDayOpenEndTime" penwidth="1.5" ]
        "(*trade_agent/pkg/cache.Cache).GetTargets" [ fillcolor="moccasin" label="GetTargets" penwidth="1.5" ]
        "(*trade_agent/pkg/cache.Cache).GetOrderBuy" [ fillcolor="moccasin" label="GetOrderBuy" penwidth="1.5" ]
        "(*trade_agent/pkg/cache.Cache).GetOrderSell" [ fillcolor="moccasin" label="GetOrderSell" penwidth="1.5" ]
        "(*trade_agent/pkg/cache.Cache).GetRealTimeTickClose" [ penwidth="1.5" fillcolor="moccasin" label="GetRealTimeTickClose" ]
        "(*trade_agent/pkg/cache.Cache).GetOrderSellFirst" [ fillcolor="moccasin" label="GetOrderSellFirst" penwidth="1.5" ]
        "(*trade_agent/pkg/cache.Cache).GetOrderBuyLater" [ fillcolor="moccasin" label="GetOrderBuyLater" penwidth="1.5" ]
        "(*trade_agent/pkg/cache.Cache).GetBiasRate" [ fillcolor="moccasin" label="GetBiasRate" penwidth="1.5" ]
        "(*trade_agent/pkg/cache.Cache).GetIsAllowTrade" [ fillcolor="moccasin" label="GetIsAllowTrade" penwidth="1.5" ]
        "(*trade_agent/pkg/cache.Cache).GetOrderForwardCountDetail" [ penwidth="1.5" fillcolor="moccasin" label="GetOrderForwardCountDetail" ]
        "(*trade_agent/pkg/cache.Cache).GetOrderReverseCountDetail" [ fillcolor="moccasin" label="GetOrderReverseCountDetail" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_trade_agent/pkg/config" {
        fillcolor="lightyellow";
URL="/?f=trade_agent/pkg/config";
fontname="Tahoma bold";
rank="sink";
label="config";
tooltip="package: trade_agent/pkg/config";
penwidth="0.8";
fontsize="16";
style="filled";
        
        "trade_agent/pkg/config.GetTradeConfig" [ penwidth="1.5" fillcolor="moccasin" label="GetTradeConfig" ]
        "trade_agent/pkg/config.GetSwitchConfig" [ fillcolor="moccasin" label="GetSwitchConfig" penwidth="1.5" ]
        "trade_agent/pkg/config.TurnTradeInSwitchOFF" [ label="TurnTradeInSwitchOFF" penwidth="1.5" fillcolor="moccasin" ]
        
    }

        subgraph "cluster_trade_agent/pkg/dbagent" {
        penwidth="0.8";
fontsize="16";
style="filled";
fontname="Tahoma bold";
label="dbagent";
fillcolor="lightyellow";
rank="sink";
URL="/?f=trade_agent/pkg/dbagent";
tooltip="package: trade_agent/pkg/dbagent";
        
        "trade_agent/pkg/dbagent.Get" [ penwidth="1.5" fillcolor="moccasin" label="Get" ]
        
        subgraph "cluster_*trade_agent/pkg/dbagent.DBAgent" {
        penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="wheat2";
label="(*DBAgent)";
tooltip="type: *trade_agent/pkg/dbagent.DBAgent";
        
        "(*trade_agent/pkg/dbagent.DBAgent).InsertOrUpdateMultiOrderStatus" [ fillcolor="moccasin" label="InsertOrUpdateMultiOrderStatus" penwidth="1.5" ]
        "(*trade_agent/pkg/dbagent.DBAgent).InsertOrUpdateBalance" [ fillcolor="moccasin" label="InsertOrUpdateBalance" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_trade_agent/pkg/eventbus" {
        style="filled";
fillcolor="lightyellow";
fontname="Tahoma bold";
label="eventbus";
URL="/?f=trade_agent/pkg/eventbus";
tooltip="package: trade_agent/pkg/eventbus";
penwidth="0.8";
rank="sink";
fontsize="16";
        
        "trade_agent/pkg/eventbus.Get" [ fillcolor="moccasin" label="Get" penwidth="1.5" ]
        
        subgraph "cluster_*trade_agent/pkg/eventbus.BusAgent" {
        penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="wheat2";
label="(*BusAgent)";
tooltip="type: *trade_agent/pkg/eventbus.BusAgent";
        
        "(*trade_agent/pkg/eventbus.BusAgent).PublishStockOrder" [ penwidth="1.5" fillcolor="moccasin" label="PublishStockOrder" ]
        "(*trade_agent/pkg/eventbus.BusAgent).SubscribeStockOrder" [ fillcolor="moccasin" label="SubscribeStockOrder" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_trade_agent/pkg/log" {
        penwidth="0.8";
style="filled";
fontname="Tahoma bold";
label="log";
tooltip="package: trade_agent/pkg/log";
fontsize="16";
fillcolor="lightyellow";
rank="sink";
URL="/?f=trade_agent/pkg/log";
        
        "trade_agent/pkg/log.Get" [ penwidth="1.5" fillcolor="moccasin" label="Get" ]
        
    }

        subgraph "cluster_trade_agent/pkg/mqhandler" {
        fontname="Tahoma bold";
rank="sink";
label="mqhandler";
URL="/?f=trade_agent/pkg/mqhandler";
penwidth="0.8";
style="filled";
fillcolor="lightyellow";
fontsize="16";
tooltip="package: trade_agent/pkg/mqhandler";
        
        "trade_agent/pkg/mqhandler.Get" [ fillcolor="moccasin" label="Get" penwidth="1.5" ]
        "trade_agent/pkg/mqhandler.TopicOrderStatus" [ fillcolor="moccasin" label="TopicOrderStatus" penwidth="1.5" ]
        
        subgraph "cluster_*trade_agent/pkg/mqhandler.MQHandler" {
        fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="wheat2";
label="(*MQHandler)";
tooltip="type: *trade_agent/pkg/mqhandler.MQHandler";
penwidth="0.5";
fontsize="15";
        
        "(*trade_agent/pkg/mqhandler.MQHandler).onMessage" [ penwidth="0.5" fillcolor="moccasin" label="onMessage" ]
        "(*trade_agent/pkg/mqhandler.MQHandler).Sub" [ fillcolor="moccasin" label="Sub" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_trade_agent/pkg/pb" {
        rank="sink";
label="pb";
style="filled";
fillcolor="lightyellow";
fontname="Tahoma bold";
URL="/?f=trade_agent/pkg/pb";
tooltip="package: trade_agent/pkg/pb";
penwidth="0.8";
fontsize="16";
        
        
        subgraph "cluster_*trade_agent/pkg/pb.OrderStatusHistoryMessage" {
        tooltip="type: *trade_agent/pkg/pb.OrderStatusHistoryMessage";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="wheat2";
label="(*OrderStatusHistoryMessage)";
        
        "(*trade_agent/pkg/pb.OrderStatusHistoryMessage).GetCode" [ fillcolor="moccasin" label="GetCode" penwidth="1.5" ]
        "(*trade_agent/pkg/pb.OrderStatusHistoryMessage).GetStatus" [ penwidth="1.5" fillcolor="moccasin" label="GetStatus" ]
        "(*trade_agent/pkg/pb.OrderStatusHistoryMessage).GetOrderId" [ fillcolor="moccasin" label="GetOrderId" penwidth="1.5" ]
        "(*trade_agent/pkg/pb.OrderStatusHistoryMessage).ToOrderStatus" [ fillcolor="moccasin" label="ToOrderStatus" penwidth="1.5" ]
        
    }

        subgraph "cluster_*trade_agent/pkg/pb.OrderStatusHistoryResponse" {
        penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="wheat2";
label="(*OrderStatusHistoryResponse)";
tooltip="type: *trade_agent/pkg/pb.OrderStatusHistoryResponse";
        
        "(*trade_agent/pkg/pb.OrderStatusHistoryResponse).UnmarshalProto" [ fillcolor="moccasin" label="UnmarshalProto" penwidth="1.5" ]
        "(*trade_agent/pkg/pb.OrderStatusHistoryResponse).GetData" [ fillcolor="moccasin" label="GetData" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_trade_agent/pkg/sinopacapi" {
        style="filled";
tooltip="package: trade_agent/pkg/sinopacapi";
label="sinopacapi";
URL="/?f=trade_agent/pkg/sinopacapi";
penwidth="0.8";
fontsize="16";
fillcolor="lightyellow";
fontname="Tahoma bold";
rank="sink";
        
        "trade_agent/pkg/sinopacapi.Get" [ fillcolor="moccasin" label="Get" penwidth="1.5" ]
        "trade_agent/pkg/sinopacapi.GetStockTradeFeeDiscount" [ fillcolor="moccasin" label="GetStockTradeFeeDiscount" penwidth="1.5" ]
        "trade_agent/pkg/sinopacapi.GetStockBuyCost" [ fillcolor="moccasin" label="GetStockBuyCost" penwidth="1.5" ]
        "trade_agent/pkg/sinopacapi.GetStockSellCost" [ label="GetStockSellCost" penwidth="1.5" fillcolor="moccasin" ]
        
        subgraph "cluster_*trade_agent/pkg/sinopacapi.TradeAgent" {
        label="(*TradeAgent)";
tooltip="type: *trade_agent/pkg/sinopacapi.TradeAgent";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="wheat2";
        
        "(*trade_agent/pkg/sinopacapi.TradeAgent).SetOrderToQuota" [ fillcolor="moccasin" label="SetOrderToQuota" penwidth="1.5" ]
        "(*trade_agent/pkg/sinopacapi.TradeAgent).FetchOrderStatus" [ penwidth="1.5" fillcolor="moccasin" label="FetchOrderStatus" ]
        "(*trade_agent/pkg/sinopacapi.TradeAgent).FetchOrderStatusByOrderID" [ label="FetchOrderStatusByOrderID" penwidth="1.5" fillcolor="moccasin" ]
        "(*trade_agent/pkg/sinopacapi.TradeAgent).CancelOrder" [ fillcolor="moccasin" label="CancelOrder" penwidth="1.5" ]
        "(*trade_agent/pkg/sinopacapi.TradeAgent).PlaceOrder" [ fillcolor="moccasin" label="PlaceOrder" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_trade_agent/pkg/sinopacapi/sinopacerr" {
        penwidth="0.8";
style="filled";
fillcolor="lightyellow";
fontname="Tahoma bold";
rank="sink";
fontsize="16";
label="sinopacerr";
URL="/?f=trade_agent/pkg/sinopacapi/sinopacerr";
tooltip="package: trade_agent/pkg/sinopacapi/sinopacerr";
        
        
        subgraph "cluster_*trade_agent/pkg/sinopacapi/sinopacerr.SinopacError" {
        style="rounded,filled";
fillcolor="wheat2";
label="(*SinopacError)";
tooltip="type: *trade_agent/pkg/sinopacapi/sinopacerr.SinopacError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
        
        "(*trade_agent/pkg/sinopacapi/sinopacerr.SinopacError).Error" [ fillcolor="moccasin" label="Error" penwidth="1.5" ]
        
    }

    }

        subgraph "cluster_vendor/golang.org/x/net/idna" {
        fillcolor="#E0FFE1";
rank="sink";
label="vendor/golang.org/x/net/idna";
fontsize="16";
style="filled";
URL="/?f=vendor/golang.org/x/net/idna";
tooltip="package: vendor/golang.org/x/net/idna";
penwidth="0.8";
fontname="Tahoma bold";
        
        
        subgraph "cluster_vendor/golang.org/x/net/idna.labelError" {
        tooltip="type: vendor/golang.org/x/net/idna.labelError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(labelError)";
        
        "(vendor/golang.org/x/net/idna.labelError).Error" [ penwidth="1.5" fillcolor="#adedad" label="Error" ]
        
    }

        subgraph "cluster_vendor/golang.org/x/net/idna.runeError" {
        tooltip="type: vendor/golang.org/x/net/idna.runeError";
penwidth="0.5";
fontsize="15";
fontcolor="#222222";
labelloc="b";
style="rounded,filled";
fillcolor="#c2e3c2";
label="(runeError)";
        
        "(vendor/golang.org/x/net/idna.runeError).Error" [ fillcolor="#adedad" label="Error" penwidth="1.5" ]
        
    }

    }

    }

    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*sync.Mutex).Unlock" [ color="saddlebrown" arrowhead="normalnoneodiamond" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*sync.Mutex).Lock" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*trade_agent/pkg/pb.OrderStatusHistoryResponse).UnmarshalProto" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "trade_agent/pkg/log.Get" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*github.com/sirupsen/logrus.Logger).Panic" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*trade_agent/pkg/pb.OrderStatusHistoryResponse).GetData" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "trade_agent/pkg/cache.GetCache" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*trade_agent/pkg/pb.OrderStatusHistoryMessage).GetCode" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*trade_agent/pkg/cache.Cache).GetOrderWaiting" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*trade_agent/pkg/pb.OrderStatusHistoryMessage).GetStatus" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*trade_agent/pkg/pb.OrderStatusHistoryMessage).GetOrderId" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*trade_agent/pkg/pb.OrderStatusHistoryMessage).ToOrderStatus" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*trade_agent/pkg/cache.Cache).SetOrderWaiting" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "trade_agent/pkg/sinopacapi.Get" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*trade_agent/pkg/sinopacapi.TradeAgent).SetOrderToQuota" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.displayOrderResult" -> "trade_agent/pkg/log.Get" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.displayOrderResult" -> "(*github.com/sirupsen/logrus.Logger).WithFields" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.displayOrderResult" -> "(*github.com/sirupsen/logrus.Entry).Infof" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "trade_agent/pkg/modules/order.displayOrderResult" [  ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*trade_agent/pkg/cache.Cache).AppendOrderBuy" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*trade_agent/pkg/cache.Cache).AppendOrderForward" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*trade_agent/pkg/cache.Cache).AppendOrderSell" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*trade_agent/pkg/cache.Cache).AppendOrderSellFirst" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*trade_agent/pkg/cache.Cache).AppendOrderReverse" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*trade_agent/pkg/cache.Cache).AppendOrderBuyLater" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "trade_agent/pkg/dbagent.Get" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*trade_agent/pkg/dbagent.DBAgent).InsertOrUpdateMultiOrderStatus" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*github.com/sirupsen/logrus.Logger).Error" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderStausCallback" -> "(*github.com/eclipse/paho.mqtt.golang.message).Payload" [ style="dashed" color="saddlebrown" ]
    "(*trade_agent/pkg/mqhandler.MQHandler).onMessage" -> "trade_agent/pkg/modules/order.orderStausCallback" [ style="dashed" arrowhead="normalnoneodot" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.subOrderStatus" -> "trade_agent/pkg/mqhandler.Get" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.subOrderStatus" -> "trade_agent/pkg/mqhandler.TopicOrderStatus" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.subOrderStatus" -> "(*trade_agent/pkg/mqhandler.MQHandler).Sub" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.subOrderStatus$1" -> "time.Tick" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.updateTradeBalance" -> "trade_agent/pkg/cache.GetCache" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.updateTradeBalance" -> "(*trade_agent/pkg/cache.Cache).GetOrderForward" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.updateTradeBalance" -> "(*trade_agent/pkg/cache.Cache).GetOrderReverse" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.updateTradeBalance" -> "trade_agent/pkg/sinopacapi.GetStockTradeFeeDiscount" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.updateTradeBalance" -> "trade_agent/pkg/sinopacapi.GetStockBuyCost" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.updateTradeBalance" -> "trade_agent/pkg/sinopacapi.GetStockSellCost" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.updateTradeBalance" -> "(*trade_agent/pkg/cache.Cache).GetTradeDay" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.updateTradeBalance" -> "trade_agent/pkg/dbagent.Get" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.updateTradeBalance" -> "(*trade_agent/pkg/dbagent.DBAgent).InsertOrUpdateBalance" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.updateTradeBalance" -> "trade_agent/pkg/log.Get" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.updateTradeBalance" -> "(*github.com/sirupsen/logrus.Logger).Panic" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.subOrderStatus$1" -> "trade_agent/pkg/modules/order.updateTradeBalance" [  ]
    "trade_agent/pkg/modules/order.subOrderStatus" -> "trade_agent/pkg/modules/order.subOrderStatus$1" [ arrowhead="normalnoneodot" ]
    "trade_agent/pkg/modules/order.subOrderStatus$2" -> "time.Tick" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.subOrderStatus$2" -> "trade_agent/pkg/sinopacapi.Get" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.subOrderStatus$2" -> "(*trade_agent/pkg/sinopacapi.TradeAgent).FetchOrderStatus" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.subOrderStatus$2" -> "trade_agent/pkg/log.Get" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.subOrderStatus$2" -> "(*github.com/sirupsen/logrus.Logger).Error" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.subOrderStatus" -> "trade_agent/pkg/modules/order.subOrderStatus$2" [ arrowhead="normalnoneodot" ]
    "trade_agent/pkg/modules/order.InitOrder" -> "trade_agent/pkg/log.Get" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.InitOrder" -> "(*github.com/sirupsen/logrus.Logger).Info" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.InitOrder" -> "trade_agent/pkg/modules/order.subOrderStatus" [  ]
    "trade_agent/pkg/modules/order.InitOrder" -> "(*github.com/sirupsen/logrus.Logger).Panic" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.clearAllUnFinished" -> "trade_agent/pkg/cache.GetCache" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.clearAllUnFinished" -> "(*trade_agent/pkg/cache.Cache).GetTradeDayTradeOutEndTime" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.clearAllUnFinished" -> "(*trade_agent/pkg/cache.Cache).GetTradeDayOpenEndTime" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.clearAllUnFinished" -> "time.Sleep" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.clearAllUnFinished" -> "time.Now" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.clearAllUnFinished" -> "(time.Time).Before" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.clearAllUnFinished" -> "(*trade_agent/pkg/cache.Cache).GetTargets" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.clearAllUnFinished" -> "(time.Time).After" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.clearAllUnFinished" -> "(*trade_agent/pkg/cache.Cache).GetOrderBuy" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.clearAllUnFinished" -> "(*trade_agent/pkg/cache.Cache).GetOrderSell" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.clearAllUnFinished" -> "(*trade_agent/pkg/cache.Cache).GetRealTimeTickClose" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.clearAllUnFinished" -> "trade_agent/pkg/eventbus.Get" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.clearAllUnFinished" -> "(*trade_agent/pkg/eventbus.BusAgent).PublishStockOrder" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.clearAllUnFinished" -> "(*trade_agent/pkg/cache.Cache).GetOrderSellFirst" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.clearAllUnFinished" -> "(*trade_agent/pkg/cache.Cache).GetOrderBuyLater" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.InitOrder" -> "trade_agent/pkg/modules/order.clearAllUnFinished" [ arrowhead="normalnoneodot" ]
    "trade_agent/pkg/modules/order.InitOrder" -> "trade_agent/pkg/eventbus.Get" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.InitOrder" -> "(*trade_agent/pkg/eventbus.BusAgent).SubscribeStockOrder" [ color="saddlebrown" ]
    "trade_agent/cmd.main" -> "trade_agent/pkg/modules/order.InitOrder" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.getQuantityByBiasRate" -> "trade_agent/pkg/cache.GetCache" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.getQuantityByBiasRate" -> "(*trade_agent/pkg/cache.Cache).GetBiasRate" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.checkWaitingOrder" -> "trade_agent/pkg/config.GetTradeConfig" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.checkWaitingOrder" -> "(time.Time).Add" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.checkWaitingOrder" -> "time.Now" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.checkWaitingOrder" -> "(time.Time).Before" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.checkWaitingOrder" -> "trade_agent/pkg/sinopacapi.Get" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.checkWaitingOrder" -> "(*trade_agent/pkg/sinopacapi.TradeAgent).FetchOrderStatusByOrderID" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.checkWaitingOrder" -> "time.Sleep" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.checkWaitingOrder" -> "trade_agent/pkg/log.Get" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.checkWaitingOrder" -> "(*github.com/sirupsen/logrus.Logger).Error" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.checkWaitingOrder" -> "trade_agent/pkg/modules/order.checkWaitingOrder" [ arrowhead="normalnoneodot" ]
    "trade_agent/pkg/modules/order.checkWaitingOrder" -> "(*trade_agent/pkg/sinopacapi.TradeAgent).CancelOrder" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.isOrderNeedCancelAgain" -> "trade_agent/pkg/sinopacapi.Get" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.isOrderNeedCancelAgain" -> "(*trade_agent/pkg/sinopacapi.TradeAgent).FetchOrderStatusByOrderID" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.isOrderNeedCancelAgain" -> "trade_agent/pkg/log.Get" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.isOrderNeedCancelAgain" -> "(*github.com/sirupsen/logrus.Logger).Error" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.checkWaitingOrder" -> "trade_agent/pkg/modules/order.isOrderNeedCancelAgain" [  ]
    "trade_agent/pkg/modules/order.checkSwitch" -> "trade_agent/pkg/config.GetSwitchConfig" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.checkSwitch" -> "trade_agent/pkg/cache.GetCache" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.checkSwitch" -> "(*trade_agent/pkg/cache.Cache).GetIsAllowTrade" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.checkSwitch" -> "(*trade_agent/pkg/cache.Cache).GetOrderForwardCountDetail" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.checkSwitch" -> "(*trade_agent/pkg/cache.Cache).GetOrderReverseCountDetail" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*sync.Mutex).Unlock" [ arrowhead="normalnoneodiamond" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*sync.Mutex).Lock" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "trade_agent/pkg/modules/order.checkSwitch" [  ]
    "trade_agent/pkg/modules/order.orderCallback" -> "trade_agent/pkg/cache.GetCache" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*trade_agent/pkg/cache.Cache).GetOrderWaiting" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "trade_agent/pkg/modules/order.getQuantityByBiasRate" [  ]
    "trade_agent/pkg/modules/order.orderCallback" -> "trade_agent/pkg/sinopacapi.Get" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*trade_agent/pkg/sinopacapi.TradeAgent).PlaceOrder" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "trade_agent/pkg/config.TurnTradeInSwitchOFF" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "trade_agent/pkg/log.Get" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*github.com/sirupsen/logrus.Logger).Warn" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*github.com/sirupsen/logrus.Logger).Error" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*github.com/sirupsen/logrus.Logger).WithFields" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*github.com/sirupsen/logrus.Entry).Error" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*trade_agent/pkg/sinopacapi.TradeAgent).SetOrderToQuota" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*trade_agent/pkg/cache.Cache).SetOrderWaiting" [ color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "trade_agent/pkg/modules/order.checkWaitingOrder" [ arrowhead="normalnoneodot" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(crypto/x509.UnknownAuthorityError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*encoding/json.UnsupportedValueError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*net/http.ProtocolError).Error" [ color="saddlebrown" style="dashed" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*encoding/xml.TagPathError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*fmt.wrapError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*encoding/xml.UnsupportedTypeError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*net.OpError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*trade_agent/pkg/sinopacapi/sinopacerr.SinopacError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(syscall.Errno).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*os.SyscallError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*errors.errorString).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(net/http.http2StreamError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*encoding/xml.SyntaxError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(compress/flate.CorruptInputError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*net/http.httpError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(vendor/golang.org/x/net/idna.labelError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(crypto/x509.SystemRootsError).Error" [ color="saddlebrown" style="dashed" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*io/fs.PathError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(crypto/tls.alert).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*github.com/go-resty/resty/v2.noRetryErr).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*github.com/gorilla/websocket.CloseError).Error" [ color="saddlebrown" style="dashed" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*encoding/json.MarshalerError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(net/textproto.ProtocolError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*net/url.Error).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*encoding/json.SyntaxError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(vendor/golang.org/x/net/idna.runeError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(crypto/x509.HostnameError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(crypto/x509.UnhandledCriticalExtension).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(crypto/x509.CertificateInvalidError).Error" [ color="saddlebrown" style="dashed" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(encoding/xml.UnmarshalError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*encoding/json.InvalidUnmarshalError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*net.DNSError).Error" [ color="saddlebrown" style="dashed" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*encoding/json.UnsupportedTypeError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*github.com/gorilla/websocket.netError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(context.deadlineExceededError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(encoding/base64.CorruptInputError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(compress/flate.InternalError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(crypto/tls.RecordHeaderError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*internal/poll.DeadlineExceededError).Error" [ color="saddlebrown" style="dashed" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*net/http.http2httpError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(net/http.http2ConnectionError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(internal/poll.errNetClosing).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*crypto/tls.permanentError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(net/http.http2GoAwayError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(github.com/jackc/pgx/v4.SerializationError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(net/http.http2connError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*encoding/json.UnmarshalTypeError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(*strconv.NumError).Error" [ style="dashed" color="saddlebrown" ]
    "trade_agent/pkg/modules/order.orderCallback" -> "(crypto/aes.KeySizeError).Error" [ color="saddlebrown" style="dashed" ]
}
