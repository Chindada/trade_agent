// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: trade_agent_protobuf/src/trade_agent.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stock []*StockMessage `protobuf:"bytes,1,rep,name=stock,proto3" json:"stock,omitempty"`
}

func (x *StockResponse) Reset() {
	*x = StockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockResponse) ProtoMessage() {}

func (x *StockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockResponse.ProtoReflect.Descriptor instead.
func (*StockResponse) Descriptor() ([]byte, []int) {
	return file_trade_agent_protobuf_src_trade_agent_proto_rawDescGZIP(), []int{0}
}

func (x *StockResponse) GetStock() []*StockMessage {
	if x != nil {
		return x.Stock
	}
	return nil
}

type StockMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange   string  `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Category   string  `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Code       string  `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Name       string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Reference  float64 `protobuf:"fixed64,5,opt,name=reference,proto3" json:"reference,omitempty"`
	UpdateDate string  `protobuf:"bytes,6,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
	DayTrade   string  `protobuf:"bytes,7,opt,name=day_trade,json=dayTrade,proto3" json:"day_trade,omitempty"`
}

func (x *StockMessage) Reset() {
	*x = StockMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockMessage) ProtoMessage() {}

func (x *StockMessage) ProtoReflect() protoreflect.Message {
	mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockMessage.ProtoReflect.Descriptor instead.
func (*StockMessage) Descriptor() ([]byte, []int) {
	return file_trade_agent_protobuf_src_trade_agent_proto_rawDescGZIP(), []int{1}
}

func (x *StockMessage) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *StockMessage) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *StockMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StockMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StockMessage) GetReference() float64 {
	if x != nil {
		return x.Reference
	}
	return 0
}

func (x *StockMessage) GetUpdateDate() string {
	if x != nil {
		return x.UpdateDate
	}
	return ""
}

func (x *StockMessage) GetDayTrade() string {
	if x != nil {
		return x.DayTrade
	}
	return ""
}

type SnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*SnapshotMessage `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SnapshotResponse) Reset() {
	*x = SnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotResponse) ProtoMessage() {}

func (x *SnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotResponse.ProtoReflect.Descriptor instead.
func (*SnapshotResponse) Descriptor() ([]byte, []int) {
	return file_trade_agent_protobuf_src_trade_agent_proto_rawDescGZIP(), []int{2}
}

func (x *SnapshotResponse) GetData() []*SnapshotMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

type SnapshotMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts              int64   `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Code            string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Exchange        string  `protobuf:"bytes,3,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Open            float64 `protobuf:"fixed64,4,opt,name=open,proto3" json:"open,omitempty"`
	High            float64 `protobuf:"fixed64,5,opt,name=high,proto3" json:"high,omitempty"`
	Low             float64 `protobuf:"fixed64,6,opt,name=low,proto3" json:"low,omitempty"`
	Close           float64 `protobuf:"fixed64,7,opt,name=close,proto3" json:"close,omitempty"`
	TickType        string  `protobuf:"bytes,8,opt,name=tick_type,json=tickType,proto3" json:"tick_type,omitempty"`
	ChangePrice     float64 `protobuf:"fixed64,9,opt,name=change_price,json=changePrice,proto3" json:"change_price,omitempty"`
	ChangeRate      float64 `protobuf:"fixed64,10,opt,name=change_rate,json=changeRate,proto3" json:"change_rate,omitempty"`
	ChangeType      string  `protobuf:"bytes,11,opt,name=change_type,json=changeType,proto3" json:"change_type,omitempty"`
	AveragePrice    float64 `protobuf:"fixed64,12,opt,name=average_price,json=averagePrice,proto3" json:"average_price,omitempty"`
	Volume          int64   `protobuf:"varint,13,opt,name=volume,proto3" json:"volume,omitempty"`
	TotalVolume     int64   `protobuf:"varint,14,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	Amount          int64   `protobuf:"varint,15,opt,name=amount,proto3" json:"amount,omitempty"`
	TotalAmount     int64   `protobuf:"varint,16,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	YesterdayVolume float64 `protobuf:"fixed64,17,opt,name=yesterday_volume,json=yesterdayVolume,proto3" json:"yesterday_volume,omitempty"`
	BuyPrice        float64 `protobuf:"fixed64,18,opt,name=buy_price,json=buyPrice,proto3" json:"buy_price,omitempty"`
	BuyVolume       float64 `protobuf:"fixed64,19,opt,name=buy_volume,json=buyVolume,proto3" json:"buy_volume,omitempty"`
	SellPrice       float64 `protobuf:"fixed64,20,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`
	SellVolume      int64   `protobuf:"varint,21,opt,name=sell_volume,json=sellVolume,proto3" json:"sell_volume,omitempty"`
	VolumeRatio     float64 `protobuf:"fixed64,22,opt,name=volume_ratio,json=volumeRatio,proto3" json:"volume_ratio,omitempty"`
}

func (x *SnapshotMessage) Reset() {
	*x = SnapshotMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotMessage) ProtoMessage() {}

func (x *SnapshotMessage) ProtoReflect() protoreflect.Message {
	mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotMessage.ProtoReflect.Descriptor instead.
func (*SnapshotMessage) Descriptor() ([]byte, []int) {
	return file_trade_agent_protobuf_src_trade_agent_proto_rawDescGZIP(), []int{3}
}

func (x *SnapshotMessage) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *SnapshotMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SnapshotMessage) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *SnapshotMessage) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *SnapshotMessage) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *SnapshotMessage) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *SnapshotMessage) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *SnapshotMessage) GetTickType() string {
	if x != nil {
		return x.TickType
	}
	return ""
}

func (x *SnapshotMessage) GetChangePrice() float64 {
	if x != nil {
		return x.ChangePrice
	}
	return 0
}

func (x *SnapshotMessage) GetChangeRate() float64 {
	if x != nil {
		return x.ChangeRate
	}
	return 0
}

func (x *SnapshotMessage) GetChangeType() string {
	if x != nil {
		return x.ChangeType
	}
	return ""
}

func (x *SnapshotMessage) GetAveragePrice() float64 {
	if x != nil {
		return x.AveragePrice
	}
	return 0
}

func (x *SnapshotMessage) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *SnapshotMessage) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *SnapshotMessage) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SnapshotMessage) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *SnapshotMessage) GetYesterdayVolume() float64 {
	if x != nil {
		return x.YesterdayVolume
	}
	return 0
}

func (x *SnapshotMessage) GetBuyPrice() float64 {
	if x != nil {
		return x.BuyPrice
	}
	return 0
}

func (x *SnapshotMessage) GetBuyVolume() float64 {
	if x != nil {
		return x.BuyVolume
	}
	return 0
}

func (x *SnapshotMessage) GetSellPrice() float64 {
	if x != nil {
		return x.SellPrice
	}
	return 0
}

func (x *SnapshotMessage) GetSellVolume() int64 {
	if x != nil {
		return x.SellVolume
	}
	return 0
}

func (x *SnapshotMessage) GetVolumeRatio() float64 {
	if x != nil {
		return x.VolumeRatio
	}
	return 0
}

type HistoryTickResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockNum string                `protobuf:"bytes,1,opt,name=stock_num,json=stockNum,proto3" json:"stock_num,omitempty"`
	Date     string                `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Data     []*HistoryTickMessage `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *HistoryTickResponse) Reset() {
	*x = HistoryTickResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryTickResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryTickResponse) ProtoMessage() {}

func (x *HistoryTickResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryTickResponse.ProtoReflect.Descriptor instead.
func (*HistoryTickResponse) Descriptor() ([]byte, []int) {
	return file_trade_agent_protobuf_src_trade_agent_proto_rawDescGZIP(), []int{4}
}

func (x *HistoryTickResponse) GetStockNum() string {
	if x != nil {
		return x.StockNum
	}
	return ""
}

func (x *HistoryTickResponse) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *HistoryTickResponse) GetData() []*HistoryTickMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

type HistoryTickMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts        int64   `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Close     float64 `protobuf:"fixed64,2,opt,name=close,proto3" json:"close,omitempty"`
	Volume    int64   `protobuf:"varint,3,opt,name=volume,proto3" json:"volume,omitempty"`
	BidPrice  float64 `protobuf:"fixed64,4,opt,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	BidVolume int64   `protobuf:"varint,5,opt,name=bid_volume,json=bidVolume,proto3" json:"bid_volume,omitempty"`
	AskPrice  float64 `protobuf:"fixed64,6,opt,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	AskVolume int64   `protobuf:"varint,7,opt,name=ask_volume,json=askVolume,proto3" json:"ask_volume,omitempty"`
	TickType  int64   `protobuf:"varint,8,opt,name=tick_type,json=tickType,proto3" json:"tick_type,omitempty"`
}

func (x *HistoryTickMessage) Reset() {
	*x = HistoryTickMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryTickMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryTickMessage) ProtoMessage() {}

func (x *HistoryTickMessage) ProtoReflect() protoreflect.Message {
	mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryTickMessage.ProtoReflect.Descriptor instead.
func (*HistoryTickMessage) Descriptor() ([]byte, []int) {
	return file_trade_agent_protobuf_src_trade_agent_proto_rawDescGZIP(), []int{5}
}

func (x *HistoryTickMessage) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *HistoryTickMessage) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *HistoryTickMessage) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *HistoryTickMessage) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *HistoryTickMessage) GetBidVolume() int64 {
	if x != nil {
		return x.BidVolume
	}
	return 0
}

func (x *HistoryTickMessage) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *HistoryTickMessage) GetAskVolume() int64 {
	if x != nil {
		return x.AskVolume
	}
	return 0
}

func (x *HistoryTickMessage) GetTickType() int64 {
	if x != nil {
		return x.TickType
	}
	return 0
}

type KbarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockNum  string         `protobuf:"bytes,1,opt,name=stock_num,json=stockNum,proto3" json:"stock_num,omitempty"`
	StartDate string         `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   string         `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Data      []*KbarMessage `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *KbarResponse) Reset() {
	*x = KbarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KbarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KbarResponse) ProtoMessage() {}

func (x *KbarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KbarResponse.ProtoReflect.Descriptor instead.
func (*KbarResponse) Descriptor() ([]byte, []int) {
	return file_trade_agent_protobuf_src_trade_agent_proto_rawDescGZIP(), []int{6}
}

func (x *KbarResponse) GetStockNum() string {
	if x != nil {
		return x.StockNum
	}
	return ""
}

func (x *KbarResponse) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *KbarResponse) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *KbarResponse) GetData() []*KbarMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

type KbarMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts     int64   `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Close  float64 `protobuf:"fixed64,2,opt,name=Close,proto3" json:"Close,omitempty"`
	Open   float64 `protobuf:"fixed64,3,opt,name=Open,proto3" json:"Open,omitempty"`
	High   float64 `protobuf:"fixed64,4,opt,name=High,proto3" json:"High,omitempty"`
	Low    float64 `protobuf:"fixed64,5,opt,name=Low,proto3" json:"Low,omitempty"`
	Volume int64   `protobuf:"varint,6,opt,name=Volume,proto3" json:"Volume,omitempty"`
}

func (x *KbarMessage) Reset() {
	*x = KbarMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KbarMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KbarMessage) ProtoMessage() {}

func (x *KbarMessage) ProtoReflect() protoreflect.Message {
	mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KbarMessage.ProtoReflect.Descriptor instead.
func (*KbarMessage) Descriptor() ([]byte, []int) {
	return file_trade_agent_protobuf_src_trade_agent_proto_rawDescGZIP(), []int{7}
}

func (x *KbarMessage) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *KbarMessage) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *KbarMessage) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *KbarMessage) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *KbarMessage) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *KbarMessage) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type LastCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*LastCountMessage `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *LastCountResponse) Reset() {
	*x = LastCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastCountResponse) ProtoMessage() {}

func (x *LastCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastCountResponse.ProtoReflect.Descriptor instead.
func (*LastCountResponse) Descriptor() ([]byte, []int) {
	return file_trade_agent_protobuf_src_trade_agent_proto_rawDescGZIP(), []int{8}
}

func (x *LastCountResponse) GetData() []*LastCountMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

type LastCountMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date  string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Code  string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Close float64 `protobuf:"fixed64,3,opt,name=close,proto3" json:"close,omitempty"`
}

func (x *LastCountMessage) Reset() {
	*x = LastCountMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastCountMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastCountMessage) ProtoMessage() {}

func (x *LastCountMessage) ProtoReflect() protoreflect.Message {
	mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastCountMessage.ProtoReflect.Descriptor instead.
func (*LastCountMessage) Descriptor() ([]byte, []int) {
	return file_trade_agent_protobuf_src_trade_agent_proto_rawDescGZIP(), []int{9}
}

func (x *LastCountMessage) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *LastCountMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *LastCountMessage) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

type VolumeRankResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64                `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Date  string               `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Data  []*VolumeRankMessage `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *VolumeRankResponse) Reset() {
	*x = VolumeRankResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeRankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeRankResponse) ProtoMessage() {}

func (x *VolumeRankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeRankResponse.ProtoReflect.Descriptor instead.
func (*VolumeRankResponse) Descriptor() ([]byte, []int) {
	return file_trade_agent_protobuf_src_trade_agent_proto_rawDescGZIP(), []int{10}
}

func (x *VolumeRankResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *VolumeRankResponse) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *VolumeRankResponse) GetData() []*VolumeRankMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

type VolumeRankMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date            string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Code            string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name            string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Ts              int64   `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`
	Open            float64 `protobuf:"fixed64,5,opt,name=open,proto3" json:"open,omitempty"`
	High            float64 `protobuf:"fixed64,6,opt,name=high,proto3" json:"high,omitempty"`
	Low             float64 `protobuf:"fixed64,7,opt,name=low,proto3" json:"low,omitempty"`
	Close           float64 `protobuf:"fixed64,8,opt,name=close,proto3" json:"close,omitempty"`
	PriceRange      float64 `protobuf:"fixed64,9,opt,name=price_range,json=priceRange,proto3" json:"price_range,omitempty"`
	TickType        int64   `protobuf:"varint,10,opt,name=tick_type,json=tickType,proto3" json:"tick_type,omitempty"`
	ChangePrice     float64 `protobuf:"fixed64,11,opt,name=change_price,json=changePrice,proto3" json:"change_price,omitempty"`
	ChangeType      int64   `protobuf:"varint,12,opt,name=change_type,json=changeType,proto3" json:"change_type,omitempty"`
	AveragePrice    float64 `protobuf:"fixed64,13,opt,name=average_price,json=averagePrice,proto3" json:"average_price,omitempty"`
	Volume          int64   `protobuf:"varint,14,opt,name=volume,proto3" json:"volume,omitempty"`
	TotalVolume     int64   `protobuf:"varint,15,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	Amount          int64   `protobuf:"varint,16,opt,name=amount,proto3" json:"amount,omitempty"`
	TotalAmount     int64   `protobuf:"varint,17,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	YesterdayVolume int64   `protobuf:"varint,18,opt,name=yesterday_volume,json=yesterdayVolume,proto3" json:"yesterday_volume,omitempty"`
	VolumeRatio     float64 `protobuf:"fixed64,19,opt,name=volume_ratio,json=volumeRatio,proto3" json:"volume_ratio,omitempty"`
	BuyPrice        float64 `protobuf:"fixed64,20,opt,name=buy_price,json=buyPrice,proto3" json:"buy_price,omitempty"`
	BuyVolume       int64   `protobuf:"varint,21,opt,name=buy_volume,json=buyVolume,proto3" json:"buy_volume,omitempty"`
	SellPrice       float64 `protobuf:"fixed64,22,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`
	SellVolume      int64   `protobuf:"varint,23,opt,name=sell_volume,json=sellVolume,proto3" json:"sell_volume,omitempty"`
	BidOrders       int64   `protobuf:"varint,24,opt,name=bid_orders,json=bidOrders,proto3" json:"bid_orders,omitempty"`
	BidVolumes      int64   `protobuf:"varint,25,opt,name=bid_volumes,json=bidVolumes,proto3" json:"bid_volumes,omitempty"`
	AskOrders       int64   `protobuf:"varint,26,opt,name=ask_orders,json=askOrders,proto3" json:"ask_orders,omitempty"`
	AskVolumes      int64   `protobuf:"varint,27,opt,name=ask_volumes,json=askVolumes,proto3" json:"ask_volumes,omitempty"`
}

func (x *VolumeRankMessage) Reset() {
	*x = VolumeRankMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeRankMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeRankMessage) ProtoMessage() {}

func (x *VolumeRankMessage) ProtoReflect() protoreflect.Message {
	mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeRankMessage.ProtoReflect.Descriptor instead.
func (*VolumeRankMessage) Descriptor() ([]byte, []int) {
	return file_trade_agent_protobuf_src_trade_agent_proto_rawDescGZIP(), []int{11}
}

func (x *VolumeRankMessage) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *VolumeRankMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *VolumeRankMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeRankMessage) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *VolumeRankMessage) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *VolumeRankMessage) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *VolumeRankMessage) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *VolumeRankMessage) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *VolumeRankMessage) GetPriceRange() float64 {
	if x != nil {
		return x.PriceRange
	}
	return 0
}

func (x *VolumeRankMessage) GetTickType() int64 {
	if x != nil {
		return x.TickType
	}
	return 0
}

func (x *VolumeRankMessage) GetChangePrice() float64 {
	if x != nil {
		return x.ChangePrice
	}
	return 0
}

func (x *VolumeRankMessage) GetChangeType() int64 {
	if x != nil {
		return x.ChangeType
	}
	return 0
}

func (x *VolumeRankMessage) GetAveragePrice() float64 {
	if x != nil {
		return x.AveragePrice
	}
	return 0
}

func (x *VolumeRankMessage) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *VolumeRankMessage) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *VolumeRankMessage) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *VolumeRankMessage) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *VolumeRankMessage) GetYesterdayVolume() int64 {
	if x != nil {
		return x.YesterdayVolume
	}
	return 0
}

func (x *VolumeRankMessage) GetVolumeRatio() float64 {
	if x != nil {
		return x.VolumeRatio
	}
	return 0
}

func (x *VolumeRankMessage) GetBuyPrice() float64 {
	if x != nil {
		return x.BuyPrice
	}
	return 0
}

func (x *VolumeRankMessage) GetBuyVolume() int64 {
	if x != nil {
		return x.BuyVolume
	}
	return 0
}

func (x *VolumeRankMessage) GetSellPrice() float64 {
	if x != nil {
		return x.SellPrice
	}
	return 0
}

func (x *VolumeRankMessage) GetSellVolume() int64 {
	if x != nil {
		return x.SellVolume
	}
	return 0
}

func (x *VolumeRankMessage) GetBidOrders() int64 {
	if x != nil {
		return x.BidOrders
	}
	return 0
}

func (x *VolumeRankMessage) GetBidVolumes() int64 {
	if x != nil {
		return x.BidVolumes
	}
	return 0
}

func (x *VolumeRankMessage) GetAskOrders() int64 {
	if x != nil {
		return x.AskOrders
	}
	return 0
}

func (x *VolumeRankMessage) GetAskVolumes() int64 {
	if x != nil {
		return x.AskVolumes
	}
	return 0
}

type OrderStatusHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*OrderStatusHistoryMessage `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *OrderStatusHistoryResponse) Reset() {
	*x = OrderStatusHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStatusHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatusHistoryResponse) ProtoMessage() {}

func (x *OrderStatusHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatusHistoryResponse.ProtoReflect.Descriptor instead.
func (*OrderStatusHistoryResponse) Descriptor() ([]byte, []int) {
	return file_trade_agent_protobuf_src_trade_agent_proto_rawDescGZIP(), []int{12}
}

func (x *OrderStatusHistoryResponse) GetData() []*OrderStatusHistoryMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

type OrderStatusHistoryMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    string  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Code      string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Action    string  `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Price     float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	Quantity  int64   `protobuf:"varint,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	OrderId   string  `protobuf:"bytes,6,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderTime string  `protobuf:"bytes,7,opt,name=order_time,json=orderTime,proto3" json:"order_time,omitempty"`
}

func (x *OrderStatusHistoryMessage) Reset() {
	*x = OrderStatusHistoryMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStatusHistoryMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatusHistoryMessage) ProtoMessage() {}

func (x *OrderStatusHistoryMessage) ProtoReflect() protoreflect.Message {
	mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatusHistoryMessage.ProtoReflect.Descriptor instead.
func (*OrderStatusHistoryMessage) Descriptor() ([]byte, []int) {
	return file_trade_agent_protobuf_src_trade_agent_proto_rawDescGZIP(), []int{13}
}

func (x *OrderStatusHistoryMessage) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OrderStatusHistoryMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *OrderStatusHistoryMessage) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *OrderStatusHistoryMessage) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderStatusHistoryMessage) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OrderStatusHistoryMessage) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderStatusHistoryMessage) GetOrderTime() string {
	if x != nil {
		return x.OrderTime
	}
	return ""
}

type RealTimeTickResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange string               `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Tick     *RealTimeTickMessage `protobuf:"bytes,2,opt,name=tick,proto3" json:"tick,omitempty"`
}

func (x *RealTimeTickResponse) Reset() {
	*x = RealTimeTickResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealTimeTickResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeTickResponse) ProtoMessage() {}

func (x *RealTimeTickResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeTickResponse.ProtoReflect.Descriptor instead.
func (*RealTimeTickResponse) Descriptor() ([]byte, []int) {
	return file_trade_agent_protobuf_src_trade_agent_proto_rawDescGZIP(), []int{14}
}

func (x *RealTimeTickResponse) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *RealTimeTickResponse) GetTick() *RealTimeTickMessage {
	if x != nil {
		return x.Tick
	}
	return nil
}

type RealTimeTickMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	DateTime        string  `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	Open            float64 `protobuf:"fixed64,3,opt,name=open,proto3" json:"open,omitempty"`
	AvgPrice        float64 `protobuf:"fixed64,4,opt,name=avg_price,json=avgPrice,proto3" json:"avg_price,omitempty"`
	Close           float64 `protobuf:"fixed64,5,opt,name=close,proto3" json:"close,omitempty"`
	High            float64 `protobuf:"fixed64,6,opt,name=high,proto3" json:"high,omitempty"`
	Low             float64 `protobuf:"fixed64,7,opt,name=low,proto3" json:"low,omitempty"`
	Amount          float64 `protobuf:"fixed64,8,opt,name=amount,proto3" json:"amount,omitempty"`
	TotalAmount     float64 `protobuf:"fixed64,9,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	Volume          int64   `protobuf:"varint,10,opt,name=volume,proto3" json:"volume,omitempty"`
	TotalVolume     int64   `protobuf:"varint,11,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	TickType        int64   `protobuf:"varint,12,opt,name=tick_type,json=tickType,proto3" json:"tick_type,omitempty"`
	ChgType         int64   `protobuf:"varint,13,opt,name=chg_type,json=chgType,proto3" json:"chg_type,omitempty"`
	PriceChg        float64 `protobuf:"fixed64,14,opt,name=price_chg,json=priceChg,proto3" json:"price_chg,omitempty"`
	PctChg          float64 `protobuf:"fixed64,15,opt,name=pct_chg,json=pctChg,proto3" json:"pct_chg,omitempty"`
	BidSideTotalVol int64   `protobuf:"varint,16,opt,name=bid_side_total_vol,json=bidSideTotalVol,proto3" json:"bid_side_total_vol,omitempty"`
	AskSideTotalVol int64   `protobuf:"varint,17,opt,name=ask_side_total_vol,json=askSideTotalVol,proto3" json:"ask_side_total_vol,omitempty"`
	BidSideTotalCnt int64   `protobuf:"varint,18,opt,name=bid_side_total_cnt,json=bidSideTotalCnt,proto3" json:"bid_side_total_cnt,omitempty"`
	AskSideTotalCnt int64   `protobuf:"varint,19,opt,name=ask_side_total_cnt,json=askSideTotalCnt,proto3" json:"ask_side_total_cnt,omitempty"`
	Suspend         int64   `protobuf:"varint,20,opt,name=suspend,proto3" json:"suspend,omitempty"`
	Simtrade        int64   `protobuf:"varint,21,opt,name=simtrade,proto3" json:"simtrade,omitempty"`
}

func (x *RealTimeTickMessage) Reset() {
	*x = RealTimeTickMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealTimeTickMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeTickMessage) ProtoMessage() {}

func (x *RealTimeTickMessage) ProtoReflect() protoreflect.Message {
	mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeTickMessage.ProtoReflect.Descriptor instead.
func (*RealTimeTickMessage) Descriptor() ([]byte, []int) {
	return file_trade_agent_protobuf_src_trade_agent_proto_rawDescGZIP(), []int{15}
}

func (x *RealTimeTickMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RealTimeTickMessage) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

func (x *RealTimeTickMessage) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *RealTimeTickMessage) GetAvgPrice() float64 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *RealTimeTickMessage) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *RealTimeTickMessage) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *RealTimeTickMessage) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *RealTimeTickMessage) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RealTimeTickMessage) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *RealTimeTickMessage) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *RealTimeTickMessage) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *RealTimeTickMessage) GetTickType() int64 {
	if x != nil {
		return x.TickType
	}
	return 0
}

func (x *RealTimeTickMessage) GetChgType() int64 {
	if x != nil {
		return x.ChgType
	}
	return 0
}

func (x *RealTimeTickMessage) GetPriceChg() float64 {
	if x != nil {
		return x.PriceChg
	}
	return 0
}

func (x *RealTimeTickMessage) GetPctChg() float64 {
	if x != nil {
		return x.PctChg
	}
	return 0
}

func (x *RealTimeTickMessage) GetBidSideTotalVol() int64 {
	if x != nil {
		return x.BidSideTotalVol
	}
	return 0
}

func (x *RealTimeTickMessage) GetAskSideTotalVol() int64 {
	if x != nil {
		return x.AskSideTotalVol
	}
	return 0
}

func (x *RealTimeTickMessage) GetBidSideTotalCnt() int64 {
	if x != nil {
		return x.BidSideTotalCnt
	}
	return 0
}

func (x *RealTimeTickMessage) GetAskSideTotalCnt() int64 {
	if x != nil {
		return x.AskSideTotalCnt
	}
	return 0
}

func (x *RealTimeTickMessage) GetSuspend() int64 {
	if x != nil {
		return x.Suspend
	}
	return 0
}

func (x *RealTimeTickMessage) GetSimtrade() int64 {
	if x != nil {
		return x.Simtrade
	}
	return 0
}

type RealTimeBidAskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange string                 `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	BidAsk   *RealTimeBidAskMessage `protobuf:"bytes,2,opt,name=bid_ask,json=bidAsk,proto3" json:"bid_ask,omitempty"`
}

func (x *RealTimeBidAskResponse) Reset() {
	*x = RealTimeBidAskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealTimeBidAskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeBidAskResponse) ProtoMessage() {}

func (x *RealTimeBidAskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeBidAskResponse.ProtoReflect.Descriptor instead.
func (*RealTimeBidAskResponse) Descriptor() ([]byte, []int) {
	return file_trade_agent_protobuf_src_trade_agent_proto_rawDescGZIP(), []int{16}
}

func (x *RealTimeBidAskResponse) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *RealTimeBidAskResponse) GetBidAsk() *RealTimeBidAskMessage {
	if x != nil {
		return x.BidAsk
	}
	return nil
}

type RealTimeBidAskMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       string    `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	DateTime   string    `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	BidPrice   []float64 `protobuf:"fixed64,3,rep,packed,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	BidVolume  []int64   `protobuf:"varint,4,rep,packed,name=bid_volume,json=bidVolume,proto3" json:"bid_volume,omitempty"`
	DiffBidVol []int64   `protobuf:"varint,5,rep,packed,name=diff_bid_vol,json=diffBidVol,proto3" json:"diff_bid_vol,omitempty"`
	AskPrice   []float64 `protobuf:"fixed64,6,rep,packed,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	AskVolume  []int64   `protobuf:"varint,7,rep,packed,name=ask_volume,json=askVolume,proto3" json:"ask_volume,omitempty"`
	DiffAskVol []int64   `protobuf:"varint,8,rep,packed,name=diff_ask_vol,json=diffAskVol,proto3" json:"diff_ask_vol,omitempty"`
	Suspend    int64     `protobuf:"varint,9,opt,name=suspend,proto3" json:"suspend,omitempty"`
	Simtrade   int64     `protobuf:"varint,10,opt,name=simtrade,proto3" json:"simtrade,omitempty"`
}

func (x *RealTimeBidAskMessage) Reset() {
	*x = RealTimeBidAskMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealTimeBidAskMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeBidAskMessage) ProtoMessage() {}

func (x *RealTimeBidAskMessage) ProtoReflect() protoreflect.Message {
	mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeBidAskMessage.ProtoReflect.Descriptor instead.
func (*RealTimeBidAskMessage) Descriptor() ([]byte, []int) {
	return file_trade_agent_protobuf_src_trade_agent_proto_rawDescGZIP(), []int{17}
}

func (x *RealTimeBidAskMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RealTimeBidAskMessage) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

func (x *RealTimeBidAskMessage) GetBidPrice() []float64 {
	if x != nil {
		return x.BidPrice
	}
	return nil
}

func (x *RealTimeBidAskMessage) GetBidVolume() []int64 {
	if x != nil {
		return x.BidVolume
	}
	return nil
}

func (x *RealTimeBidAskMessage) GetDiffBidVol() []int64 {
	if x != nil {
		return x.DiffBidVol
	}
	return nil
}

func (x *RealTimeBidAskMessage) GetAskPrice() []float64 {
	if x != nil {
		return x.AskPrice
	}
	return nil
}

func (x *RealTimeBidAskMessage) GetAskVolume() []int64 {
	if x != nil {
		return x.AskVolume
	}
	return nil
}

func (x *RealTimeBidAskMessage) GetDiffAskVol() []int64 {
	if x != nil {
		return x.DiffAskVol
	}
	return nil
}

func (x *RealTimeBidAskMessage) GetSuspend() int64 {
	if x != nil {
		return x.Suspend
	}
	return 0
}

func (x *RealTimeBidAskMessage) GetSimtrade() int64 {
	if x != nil {
		return x.Simtrade
	}
	return 0
}

type EventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespCode  int64  `protobuf:"varint,1,opt,name=resp_code,json=respCode,proto3" json:"resp_code,omitempty"`
	EventCode int64  `protobuf:"varint,2,opt,name=event_code,json=eventCode,proto3" json:"event_code,omitempty"`
	Info      string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Event     string `protobuf:"bytes,4,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *EventResponse) Reset() {
	*x = EventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResponse) ProtoMessage() {}

func (x *EventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResponse.ProtoReflect.Descriptor instead.
func (*EventResponse) Descriptor() ([]byte, []int) {
	return file_trade_agent_protobuf_src_trade_agent_proto_rawDescGZIP(), []int{18}
}

func (x *EventResponse) GetRespCode() int64 {
	if x != nil {
		return x.RespCode
	}
	return 0
}

func (x *EventResponse) GetEventCode() int64 {
	if x != nil {
		return x.EventCode
	}
	return 0
}

func (x *EventResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *EventResponse) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

var File_trade_agent_protobuf_src_trade_agent_proto protoreflect.FileDescriptor

var file_trade_agent_protobuf_src_trade_agent_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x22, 0x49, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0xca, 0x01,
	0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x10, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x88, 0x05, 0x0a, 0x0f, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x79, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x75, 0x79, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x22, 0x84, 0x01, 0x0a, 0x13, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x54, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe7, 0x01, 0x0a, 0x12,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x6b,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61,
	0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x4b, 0x62, 0x61, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4b, 0x62, 0x61, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x85, 0x01, 0x0a, 0x0b, 0x4b, 0x62, 0x61, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x70,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x48, 0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x48, 0x69,
	0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x4c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x11,
	0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a,
	0x10, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x22,
	0x7b, 0x0a, 0x12, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x96, 0x06, 0x0a,
	0x11, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x79,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x75,
	0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x75, 0x79, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x64, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x69, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x69, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x73, 0x6b, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x1a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcb, 0x01, 0x0a, 0x19, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x69,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x22, 0x81, 0x05, 0x0a, 0x13, 0x52, 0x65,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x63,
	0x74, 0x5f, 0x63, 0x68, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x63, 0x74,
	0x43, 0x68, 0x67, 0x12, 0x2b, 0x0a, 0x12, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x62, 0x69, 0x64, 0x53, 0x69, 0x64, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c,
	0x12, 0x2b, 0x0a, 0x12, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x73,
	0x6b, 0x53, 0x69, 0x64, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x12, 0x2b, 0x0a,
	0x12, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x62, 0x69, 0x64, 0x53, 0x69,
	0x64, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x73,
	0x6b, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x64, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x6d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x22, 0x7a, 0x0a,
	0x16, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x62, 0x69, 0x64, 0x5f, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x06, 0x62, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x22, 0xba, 0x02, 0x0a, 0x15, 0x52, 0x65,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x42, 0x69, 0x64, 0x56,
	0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69,
	0x6d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x69,
	0x6d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x22, 0x75, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x5a,
	0x06, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trade_agent_protobuf_src_trade_agent_proto_rawDescOnce sync.Once
	file_trade_agent_protobuf_src_trade_agent_proto_rawDescData = file_trade_agent_protobuf_src_trade_agent_proto_rawDesc
)

func file_trade_agent_protobuf_src_trade_agent_proto_rawDescGZIP() []byte {
	file_trade_agent_protobuf_src_trade_agent_proto_rawDescOnce.Do(func() {
		file_trade_agent_protobuf_src_trade_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_trade_agent_protobuf_src_trade_agent_proto_rawDescData)
	})
	return file_trade_agent_protobuf_src_trade_agent_proto_rawDescData
}

var file_trade_agent_protobuf_src_trade_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_trade_agent_protobuf_src_trade_agent_proto_goTypes = []interface{}{
	(*StockResponse)(nil),              // 0: trade_agent_protobuf.StockResponse
	(*StockMessage)(nil),               // 1: trade_agent_protobuf.StockMessage
	(*SnapshotResponse)(nil),           // 2: trade_agent_protobuf.SnapshotResponse
	(*SnapshotMessage)(nil),            // 3: trade_agent_protobuf.SnapshotMessage
	(*HistoryTickResponse)(nil),        // 4: trade_agent_protobuf.HistoryTickResponse
	(*HistoryTickMessage)(nil),         // 5: trade_agent_protobuf.HistoryTickMessage
	(*KbarResponse)(nil),               // 6: trade_agent_protobuf.KbarResponse
	(*KbarMessage)(nil),                // 7: trade_agent_protobuf.KbarMessage
	(*LastCountResponse)(nil),          // 8: trade_agent_protobuf.LastCountResponse
	(*LastCountMessage)(nil),           // 9: trade_agent_protobuf.LastCountMessage
	(*VolumeRankResponse)(nil),         // 10: trade_agent_protobuf.VolumeRankResponse
	(*VolumeRankMessage)(nil),          // 11: trade_agent_protobuf.VolumeRankMessage
	(*OrderStatusHistoryResponse)(nil), // 12: trade_agent_protobuf.OrderStatusHistoryResponse
	(*OrderStatusHistoryMessage)(nil),  // 13: trade_agent_protobuf.OrderStatusHistoryMessage
	(*RealTimeTickResponse)(nil),       // 14: trade_agent_protobuf.RealTimeTickResponse
	(*RealTimeTickMessage)(nil),        // 15: trade_agent_protobuf.RealTimeTickMessage
	(*RealTimeBidAskResponse)(nil),     // 16: trade_agent_protobuf.RealTimeBidAskResponse
	(*RealTimeBidAskMessage)(nil),      // 17: trade_agent_protobuf.RealTimeBidAskMessage
	(*EventResponse)(nil),              // 18: trade_agent_protobuf.EventResponse
}
var file_trade_agent_protobuf_src_trade_agent_proto_depIdxs = []int32{
	1,  // 0: trade_agent_protobuf.StockResponse.stock:type_name -> trade_agent_protobuf.StockMessage
	3,  // 1: trade_agent_protobuf.SnapshotResponse.data:type_name -> trade_agent_protobuf.SnapshotMessage
	5,  // 2: trade_agent_protobuf.HistoryTickResponse.data:type_name -> trade_agent_protobuf.HistoryTickMessage
	7,  // 3: trade_agent_protobuf.KbarResponse.data:type_name -> trade_agent_protobuf.KbarMessage
	9,  // 4: trade_agent_protobuf.LastCountResponse.data:type_name -> trade_agent_protobuf.LastCountMessage
	11, // 5: trade_agent_protobuf.VolumeRankResponse.data:type_name -> trade_agent_protobuf.VolumeRankMessage
	13, // 6: trade_agent_protobuf.OrderStatusHistoryResponse.data:type_name -> trade_agent_protobuf.OrderStatusHistoryMessage
	15, // 7: trade_agent_protobuf.RealTimeTickResponse.tick:type_name -> trade_agent_protobuf.RealTimeTickMessage
	17, // 8: trade_agent_protobuf.RealTimeBidAskResponse.bid_ask:type_name -> trade_agent_protobuf.RealTimeBidAskMessage
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_trade_agent_protobuf_src_trade_agent_proto_init() }
func file_trade_agent_protobuf_src_trade_agent_proto_init() {
	if File_trade_agent_protobuf_src_trade_agent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryTickResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryTickMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KbarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KbarMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastCountMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeRankResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeRankMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStatusHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStatusHistoryMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealTimeTickResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealTimeTickMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealTimeBidAskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealTimeBidAskMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_agent_protobuf_src_trade_agent_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trade_agent_protobuf_src_trade_agent_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trade_agent_protobuf_src_trade_agent_proto_goTypes,
		DependencyIndexes: file_trade_agent_protobuf_src_trade_agent_proto_depIdxs,
		MessageInfos:      file_trade_agent_protobuf_src_trade_agent_proto_msgTypes,
	}.Build()
	File_trade_agent_protobuf_src_trade_agent_proto = out.File
	file_trade_agent_protobuf_src_trade_agent_proto_rawDesc = nil
	file_trade_agent_protobuf_src_trade_agent_proto_goTypes = nil
	file_trade_agent_protobuf_src_trade_agent_proto_depIdxs = nil
}
