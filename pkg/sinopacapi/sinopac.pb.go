// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: trade_bot_protobuf/src/sinopac.proto

package sinopacapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BidAskProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange string                  `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	BidAsk   *BidAskProto_BidAskData `protobuf:"bytes,2,opt,name=bid_ask,json=bidAsk,proto3" json:"bid_ask,omitempty"`
}

func (x *BidAskProto) Reset() {
	*x = BidAskProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidAskProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidAskProto) ProtoMessage() {}

func (x *BidAskProto) ProtoReflect() protoreflect.Message {
	mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidAskProto.ProtoReflect.Descriptor instead.
func (*BidAskProto) Descriptor() ([]byte, []int) {
	return file_trade_bot_protobuf_src_sinopac_proto_rawDescGZIP(), []int{0}
}

func (x *BidAskProto) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *BidAskProto) GetBidAsk() *BidAskProto_BidAskData {
	if x != nil {
		return x.BidAsk
	}
	return nil
}

type EntireTickArrProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*EntireTickProto `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *EntireTickArrProto) Reset() {
	*x = EntireTickArrProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntireTickArrProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntireTickArrProto) ProtoMessage() {}

func (x *EntireTickArrProto) ProtoReflect() protoreflect.Message {
	mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntireTickArrProto.ProtoReflect.Descriptor instead.
func (*EntireTickArrProto) Descriptor() ([]byte, []int) {
	return file_trade_bot_protobuf_src_sinopac_proto_rawDescGZIP(), []int{1}
}

func (x *EntireTickArrProto) GetData() []*EntireTickProto {
	if x != nil {
		return x.Data
	}
	return nil
}

type EntireTickProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts        int64   `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Close     float64 `protobuf:"fixed64,2,opt,name=close,proto3" json:"close,omitempty"`
	Volume    int64   `protobuf:"varint,3,opt,name=volume,proto3" json:"volume,omitempty"`
	BidPrice  float64 `protobuf:"fixed64,4,opt,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	BidVolume int64   `protobuf:"varint,5,opt,name=bid_volume,json=bidVolume,proto3" json:"bid_volume,omitempty"`
	AskPrice  float64 `protobuf:"fixed64,6,opt,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	AskVolume int64   `protobuf:"varint,7,opt,name=ask_volume,json=askVolume,proto3" json:"ask_volume,omitempty"`
	TickType  int64   `protobuf:"varint,8,opt,name=tick_type,json=tickType,proto3" json:"tick_type,omitempty"`
}

func (x *EntireTickProto) Reset() {
	*x = EntireTickProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntireTickProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntireTickProto) ProtoMessage() {}

func (x *EntireTickProto) ProtoReflect() protoreflect.Message {
	mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntireTickProto.ProtoReflect.Descriptor instead.
func (*EntireTickProto) Descriptor() ([]byte, []int) {
	return file_trade_bot_protobuf_src_sinopac_proto_rawDescGZIP(), []int{2}
}

func (x *EntireTickProto) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *EntireTickProto) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *EntireTickProto) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *EntireTickProto) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *EntireTickProto) GetBidVolume() int64 {
	if x != nil {
		return x.BidVolume
	}
	return 0
}

func (x *EntireTickProto) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *EntireTickProto) GetAskVolume() int64 {
	if x != nil {
		return x.AskVolume
	}
	return 0
}

func (x *EntireTickProto) GetTickType() int64 {
	if x != nil {
		return x.TickType
	}
	return 0
}

type KbarArrProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*KbarProto `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *KbarArrProto) Reset() {
	*x = KbarArrProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KbarArrProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KbarArrProto) ProtoMessage() {}

func (x *KbarArrProto) ProtoReflect() protoreflect.Message {
	mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KbarArrProto.ProtoReflect.Descriptor instead.
func (*KbarArrProto) Descriptor() ([]byte, []int) {
	return file_trade_bot_protobuf_src_sinopac_proto_rawDescGZIP(), []int{3}
}

func (x *KbarArrProto) GetData() []*KbarProto {
	if x != nil {
		return x.Data
	}
	return nil
}

type KbarProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts     int64   `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Close  float64 `protobuf:"fixed64,2,opt,name=Close,proto3" json:"Close,omitempty"`
	Open   float64 `protobuf:"fixed64,3,opt,name=Open,proto3" json:"Open,omitempty"`
	High   float64 `protobuf:"fixed64,4,opt,name=High,proto3" json:"High,omitempty"`
	Low    float64 `protobuf:"fixed64,5,opt,name=Low,proto3" json:"Low,omitempty"`
	Volume int64   `protobuf:"varint,6,opt,name=Volume,proto3" json:"Volume,omitempty"`
}

func (x *KbarProto) Reset() {
	*x = KbarProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KbarProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KbarProto) ProtoMessage() {}

func (x *KbarProto) ProtoReflect() protoreflect.Message {
	mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KbarProto.ProtoReflect.Descriptor instead.
func (*KbarProto) Descriptor() ([]byte, []int) {
	return file_trade_bot_protobuf_src_sinopac_proto_rawDescGZIP(), []int{4}
}

func (x *KbarProto) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *KbarProto) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *KbarProto) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *KbarProto) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *KbarProto) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *KbarProto) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type SnapShotArrProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*SnapShotProto `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SnapShotArrProto) Reset() {
	*x = SnapShotArrProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapShotArrProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapShotArrProto) ProtoMessage() {}

func (x *SnapShotArrProto) ProtoReflect() protoreflect.Message {
	mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapShotArrProto.ProtoReflect.Descriptor instead.
func (*SnapShotArrProto) Descriptor() ([]byte, []int) {
	return file_trade_bot_protobuf_src_sinopac_proto_rawDescGZIP(), []int{5}
}

func (x *SnapShotArrProto) GetData() []*SnapShotProto {
	if x != nil {
		return x.Data
	}
	return nil
}

type SnapShotProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts              int64   `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Code            string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Exchange        string  `protobuf:"bytes,3,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Open            float64 `protobuf:"fixed64,4,opt,name=open,proto3" json:"open,omitempty"`
	High            float64 `protobuf:"fixed64,5,opt,name=high,proto3" json:"high,omitempty"`
	Low             float64 `protobuf:"fixed64,6,opt,name=low,proto3" json:"low,omitempty"`
	Close           float64 `protobuf:"fixed64,7,opt,name=close,proto3" json:"close,omitempty"`
	TickType        string  `protobuf:"bytes,8,opt,name=tick_type,json=tickType,proto3" json:"tick_type,omitempty"`
	ChangePrice     float64 `protobuf:"fixed64,9,opt,name=change_price,json=changePrice,proto3" json:"change_price,omitempty"`
	ChangeRate      float64 `protobuf:"fixed64,10,opt,name=change_rate,json=changeRate,proto3" json:"change_rate,omitempty"`
	ChangeType      string  `protobuf:"bytes,11,opt,name=change_type,json=changeType,proto3" json:"change_type,omitempty"`
	AveragePrice    float64 `protobuf:"fixed64,12,opt,name=average_price,json=averagePrice,proto3" json:"average_price,omitempty"`
	Volume          int64   `protobuf:"varint,13,opt,name=volume,proto3" json:"volume,omitempty"`
	TotalVolume     int64   `protobuf:"varint,14,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	Amount          int64   `protobuf:"varint,15,opt,name=amount,proto3" json:"amount,omitempty"`
	TotalAmount     int64   `protobuf:"varint,16,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	YesterdayVolume float64 `protobuf:"fixed64,17,opt,name=yesterday_volume,json=yesterdayVolume,proto3" json:"yesterday_volume,omitempty"`
	BuyPrice        float64 `protobuf:"fixed64,18,opt,name=buy_price,json=buyPrice,proto3" json:"buy_price,omitempty"`
	BuyVolume       float64 `protobuf:"fixed64,19,opt,name=buy_volume,json=buyVolume,proto3" json:"buy_volume,omitempty"`
	SellPrice       float64 `protobuf:"fixed64,20,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`
	SellVolume      int64   `protobuf:"varint,21,opt,name=sell_volume,json=sellVolume,proto3" json:"sell_volume,omitempty"`
	VolumeRatio     float64 `protobuf:"fixed64,22,opt,name=volume_ratio,json=volumeRatio,proto3" json:"volume_ratio,omitempty"`
}

func (x *SnapShotProto) Reset() {
	*x = SnapShotProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapShotProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapShotProto) ProtoMessage() {}

func (x *SnapShotProto) ProtoReflect() protoreflect.Message {
	mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapShotProto.ProtoReflect.Descriptor instead.
func (*SnapShotProto) Descriptor() ([]byte, []int) {
	return file_trade_bot_protobuf_src_sinopac_proto_rawDescGZIP(), []int{6}
}

func (x *SnapShotProto) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *SnapShotProto) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SnapShotProto) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *SnapShotProto) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *SnapShotProto) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *SnapShotProto) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *SnapShotProto) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *SnapShotProto) GetTickType() string {
	if x != nil {
		return x.TickType
	}
	return ""
}

func (x *SnapShotProto) GetChangePrice() float64 {
	if x != nil {
		return x.ChangePrice
	}
	return 0
}

func (x *SnapShotProto) GetChangeRate() float64 {
	if x != nil {
		return x.ChangeRate
	}
	return 0
}

func (x *SnapShotProto) GetChangeType() string {
	if x != nil {
		return x.ChangeType
	}
	return ""
}

func (x *SnapShotProto) GetAveragePrice() float64 {
	if x != nil {
		return x.AveragePrice
	}
	return 0
}

func (x *SnapShotProto) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *SnapShotProto) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *SnapShotProto) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SnapShotProto) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *SnapShotProto) GetYesterdayVolume() float64 {
	if x != nil {
		return x.YesterdayVolume
	}
	return 0
}

func (x *SnapShotProto) GetBuyPrice() float64 {
	if x != nil {
		return x.BuyPrice
	}
	return 0
}

func (x *SnapShotProto) GetBuyVolume() float64 {
	if x != nil {
		return x.BuyVolume
	}
	return 0
}

func (x *SnapShotProto) GetSellPrice() float64 {
	if x != nil {
		return x.SellPrice
	}
	return 0
}

func (x *SnapShotProto) GetSellVolume() int64 {
	if x != nil {
		return x.SellVolume
	}
	return 0
}

func (x *SnapShotProto) GetVolumeRatio() float64 {
	if x != nil {
		return x.VolumeRatio
	}
	return 0
}

type StreamTickProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange string                    `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Tick     *StreamTickProto_TickData `protobuf:"bytes,2,opt,name=tick,proto3" json:"tick,omitempty"`
}

func (x *StreamTickProto) Reset() {
	*x = StreamTickProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTickProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTickProto) ProtoMessage() {}

func (x *StreamTickProto) ProtoReflect() protoreflect.Message {
	mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTickProto.ProtoReflect.Descriptor instead.
func (*StreamTickProto) Descriptor() ([]byte, []int) {
	return file_trade_bot_protobuf_src_sinopac_proto_rawDescGZIP(), []int{7}
}

func (x *StreamTickProto) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *StreamTickProto) GetTick() *StreamTickProto_TickData {
	if x != nil {
		return x.Tick
	}
	return nil
}

type EventProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespCode  int64  `protobuf:"varint,1,opt,name=resp_code,json=respCode,proto3" json:"resp_code,omitempty"`
	EventCode int64  `protobuf:"varint,2,opt,name=event_code,json=eventCode,proto3" json:"event_code,omitempty"`
	Info      string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Event     string `protobuf:"bytes,4,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *EventProto) Reset() {
	*x = EventProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventProto) ProtoMessage() {}

func (x *EventProto) ProtoReflect() protoreflect.Message {
	mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventProto.ProtoReflect.Descriptor instead.
func (*EventProto) Descriptor() ([]byte, []int) {
	return file_trade_bot_protobuf_src_sinopac_proto_rawDescGZIP(), []int{8}
}

func (x *EventProto) GetRespCode() int64 {
	if x != nil {
		return x.RespCode
	}
	return 0
}

func (x *EventProto) GetEventCode() int64 {
	if x != nil {
		return x.EventCode
	}
	return 0
}

func (x *EventProto) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *EventProto) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

type TradeRecordArrProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TradeRecordProto `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TradeRecordArrProto) Reset() {
	*x = TradeRecordArrProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRecordArrProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRecordArrProto) ProtoMessage() {}

func (x *TradeRecordArrProto) ProtoReflect() protoreflect.Message {
	mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRecordArrProto.ProtoReflect.Descriptor instead.
func (*TradeRecordArrProto) Descriptor() ([]byte, []int) {
	return file_trade_bot_protobuf_src_sinopac_proto_rawDescGZIP(), []int{9}
}

func (x *TradeRecordArrProto) GetData() []*TradeRecordProto {
	if x != nil {
		return x.Data
	}
	return nil
}

type TradeRecordProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quantity  int64   `protobuf:"varint,1,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Price     float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	Action    string  `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Code      string  `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Id        string  `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	OrderTime string  `protobuf:"bytes,6,opt,name=order_time,json=orderTime,proto3" json:"order_time,omitempty"`
	Status    string  `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TradeRecordProto) Reset() {
	*x = TradeRecordProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRecordProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRecordProto) ProtoMessage() {}

func (x *TradeRecordProto) ProtoReflect() protoreflect.Message {
	mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRecordProto.ProtoReflect.Descriptor instead.
func (*TradeRecordProto) Descriptor() ([]byte, []int) {
	return file_trade_bot_protobuf_src_sinopac_proto_rawDescGZIP(), []int{10}
}

func (x *TradeRecordProto) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *TradeRecordProto) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradeRecordProto) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *TradeRecordProto) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TradeRecordProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TradeRecordProto) GetOrderTime() string {
	if x != nil {
		return x.OrderTime
	}
	return ""
}

func (x *TradeRecordProto) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type VolumeRankArrProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*VolumeRankProto `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *VolumeRankArrProto) Reset() {
	*x = VolumeRankArrProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeRankArrProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeRankArrProto) ProtoMessage() {}

func (x *VolumeRankArrProto) ProtoReflect() protoreflect.Message {
	mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeRankArrProto.ProtoReflect.Descriptor instead.
func (*VolumeRankArrProto) Descriptor() ([]byte, []int) {
	return file_trade_bot_protobuf_src_sinopac_proto_rawDescGZIP(), []int{11}
}

func (x *VolumeRankArrProto) GetData() []*VolumeRankProto {
	if x != nil {
		return x.Data
	}
	return nil
}

type VolumeRankProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date            string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Code            string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name            string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Ts              int64   `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`
	Open            float64 `protobuf:"fixed64,5,opt,name=open,proto3" json:"open,omitempty"`
	High            float64 `protobuf:"fixed64,6,opt,name=high,proto3" json:"high,omitempty"`
	Low             float64 `protobuf:"fixed64,7,opt,name=low,proto3" json:"low,omitempty"`
	Close           float64 `protobuf:"fixed64,8,opt,name=close,proto3" json:"close,omitempty"`
	PriceRange      float64 `protobuf:"fixed64,9,opt,name=price_range,json=priceRange,proto3" json:"price_range,omitempty"`
	TickType        int64   `protobuf:"varint,10,opt,name=tick_type,json=tickType,proto3" json:"tick_type,omitempty"`
	ChangePrice     float64 `protobuf:"fixed64,11,opt,name=change_price,json=changePrice,proto3" json:"change_price,omitempty"`
	ChangeType      int64   `protobuf:"varint,12,opt,name=change_type,json=changeType,proto3" json:"change_type,omitempty"`
	AveragePrice    float64 `protobuf:"fixed64,13,opt,name=average_price,json=averagePrice,proto3" json:"average_price,omitempty"`
	Volume          int64   `protobuf:"varint,14,opt,name=volume,proto3" json:"volume,omitempty"`
	TotalVolume     int64   `protobuf:"varint,15,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	Amount          int64   `protobuf:"varint,16,opt,name=amount,proto3" json:"amount,omitempty"`
	TotalAmount     int64   `protobuf:"varint,17,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	YesterdayVolume int64   `protobuf:"varint,18,opt,name=yesterday_volume,json=yesterdayVolume,proto3" json:"yesterday_volume,omitempty"`
	VolumeRatio     float64 `protobuf:"fixed64,19,opt,name=volume_ratio,json=volumeRatio,proto3" json:"volume_ratio,omitempty"`
	BuyPrice        float64 `protobuf:"fixed64,20,opt,name=buy_price,json=buyPrice,proto3" json:"buy_price,omitempty"`
	BuyVolume       int64   `protobuf:"varint,21,opt,name=buy_volume,json=buyVolume,proto3" json:"buy_volume,omitempty"`
	SellPrice       float64 `protobuf:"fixed64,22,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`
	SellVolume      int64   `protobuf:"varint,23,opt,name=sell_volume,json=sellVolume,proto3" json:"sell_volume,omitempty"`
	BidOrders       int64   `protobuf:"varint,24,opt,name=bid_orders,json=bidOrders,proto3" json:"bid_orders,omitempty"`
	BidVolumes      int64   `protobuf:"varint,25,opt,name=bid_volumes,json=bidVolumes,proto3" json:"bid_volumes,omitempty"`
	AskOrders       int64   `protobuf:"varint,26,opt,name=ask_orders,json=askOrders,proto3" json:"ask_orders,omitempty"`
	AskVolumes      int64   `protobuf:"varint,27,opt,name=ask_volumes,json=askVolumes,proto3" json:"ask_volumes,omitempty"`
}

func (x *VolumeRankProto) Reset() {
	*x = VolumeRankProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeRankProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeRankProto) ProtoMessage() {}

func (x *VolumeRankProto) ProtoReflect() protoreflect.Message {
	mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeRankProto.ProtoReflect.Descriptor instead.
func (*VolumeRankProto) Descriptor() ([]byte, []int) {
	return file_trade_bot_protobuf_src_sinopac_proto_rawDescGZIP(), []int{12}
}

func (x *VolumeRankProto) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *VolumeRankProto) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *VolumeRankProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeRankProto) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *VolumeRankProto) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *VolumeRankProto) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *VolumeRankProto) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *VolumeRankProto) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *VolumeRankProto) GetPriceRange() float64 {
	if x != nil {
		return x.PriceRange
	}
	return 0
}

func (x *VolumeRankProto) GetTickType() int64 {
	if x != nil {
		return x.TickType
	}
	return 0
}

func (x *VolumeRankProto) GetChangePrice() float64 {
	if x != nil {
		return x.ChangePrice
	}
	return 0
}

func (x *VolumeRankProto) GetChangeType() int64 {
	if x != nil {
		return x.ChangeType
	}
	return 0
}

func (x *VolumeRankProto) GetAveragePrice() float64 {
	if x != nil {
		return x.AveragePrice
	}
	return 0
}

func (x *VolumeRankProto) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *VolumeRankProto) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *VolumeRankProto) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *VolumeRankProto) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *VolumeRankProto) GetYesterdayVolume() int64 {
	if x != nil {
		return x.YesterdayVolume
	}
	return 0
}

func (x *VolumeRankProto) GetVolumeRatio() float64 {
	if x != nil {
		return x.VolumeRatio
	}
	return 0
}

func (x *VolumeRankProto) GetBuyPrice() float64 {
	if x != nil {
		return x.BuyPrice
	}
	return 0
}

func (x *VolumeRankProto) GetBuyVolume() int64 {
	if x != nil {
		return x.BuyVolume
	}
	return 0
}

func (x *VolumeRankProto) GetSellPrice() float64 {
	if x != nil {
		return x.SellPrice
	}
	return 0
}

func (x *VolumeRankProto) GetSellVolume() int64 {
	if x != nil {
		return x.SellVolume
	}
	return 0
}

func (x *VolumeRankProto) GetBidOrders() int64 {
	if x != nil {
		return x.BidOrders
	}
	return 0
}

func (x *VolumeRankProto) GetBidVolumes() int64 {
	if x != nil {
		return x.BidVolumes
	}
	return 0
}

func (x *VolumeRankProto) GetAskOrders() int64 {
	if x != nil {
		return x.AskOrders
	}
	return 0
}

func (x *VolumeRankProto) GetAskVolumes() int64 {
	if x != nil {
		return x.AskVolumes
	}
	return 0
}

type BidAskProto_BidAskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       string    `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	DateTime   string    `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	BidPrice   []float64 `protobuf:"fixed64,3,rep,packed,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	BidVolume  []int64   `protobuf:"varint,4,rep,packed,name=bid_volume,json=bidVolume,proto3" json:"bid_volume,omitempty"`
	DiffBidVol []int64   `protobuf:"varint,5,rep,packed,name=diff_bid_vol,json=diffBidVol,proto3" json:"diff_bid_vol,omitempty"`
	AskPrice   []float64 `protobuf:"fixed64,6,rep,packed,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	AskVolume  []int64   `protobuf:"varint,7,rep,packed,name=ask_volume,json=askVolume,proto3" json:"ask_volume,omitempty"`
	DiffAskVol []int64   `protobuf:"varint,8,rep,packed,name=diff_ask_vol,json=diffAskVol,proto3" json:"diff_ask_vol,omitempty"`
	Suspend    int64     `protobuf:"varint,9,opt,name=suspend,proto3" json:"suspend,omitempty"`
	Simtrade   int64     `protobuf:"varint,10,opt,name=simtrade,proto3" json:"simtrade,omitempty"`
}

func (x *BidAskProto_BidAskData) Reset() {
	*x = BidAskProto_BidAskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidAskProto_BidAskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidAskProto_BidAskData) ProtoMessage() {}

func (x *BidAskProto_BidAskData) ProtoReflect() protoreflect.Message {
	mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidAskProto_BidAskData.ProtoReflect.Descriptor instead.
func (*BidAskProto_BidAskData) Descriptor() ([]byte, []int) {
	return file_trade_bot_protobuf_src_sinopac_proto_rawDescGZIP(), []int{0, 0}
}

func (x *BidAskProto_BidAskData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BidAskProto_BidAskData) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

func (x *BidAskProto_BidAskData) GetBidPrice() []float64 {
	if x != nil {
		return x.BidPrice
	}
	return nil
}

func (x *BidAskProto_BidAskData) GetBidVolume() []int64 {
	if x != nil {
		return x.BidVolume
	}
	return nil
}

func (x *BidAskProto_BidAskData) GetDiffBidVol() []int64 {
	if x != nil {
		return x.DiffBidVol
	}
	return nil
}

func (x *BidAskProto_BidAskData) GetAskPrice() []float64 {
	if x != nil {
		return x.AskPrice
	}
	return nil
}

func (x *BidAskProto_BidAskData) GetAskVolume() []int64 {
	if x != nil {
		return x.AskVolume
	}
	return nil
}

func (x *BidAskProto_BidAskData) GetDiffAskVol() []int64 {
	if x != nil {
		return x.DiffAskVol
	}
	return nil
}

func (x *BidAskProto_BidAskData) GetSuspend() int64 {
	if x != nil {
		return x.Suspend
	}
	return 0
}

func (x *BidAskProto_BidAskData) GetSimtrade() int64 {
	if x != nil {
		return x.Simtrade
	}
	return 0
}

type StreamTickProto_TickData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	DateTime        string  `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	Open            float64 `protobuf:"fixed64,3,opt,name=open,proto3" json:"open,omitempty"`
	AvgPrice        float64 `protobuf:"fixed64,4,opt,name=avg_price,json=avgPrice,proto3" json:"avg_price,omitempty"`
	Close           float64 `protobuf:"fixed64,5,opt,name=close,proto3" json:"close,omitempty"`
	High            float64 `protobuf:"fixed64,6,opt,name=high,proto3" json:"high,omitempty"`
	Low             float64 `protobuf:"fixed64,7,opt,name=low,proto3" json:"low,omitempty"`
	Amount          float64 `protobuf:"fixed64,8,opt,name=amount,proto3" json:"amount,omitempty"`
	TotalAmount     float64 `protobuf:"fixed64,9,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	Volume          int64   `protobuf:"varint,10,opt,name=volume,proto3" json:"volume,omitempty"`
	TotalVolume     int64   `protobuf:"varint,11,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	TickType        int64   `protobuf:"varint,12,opt,name=tick_type,json=tickType,proto3" json:"tick_type,omitempty"`
	ChgType         int64   `protobuf:"varint,13,opt,name=chg_type,json=chgType,proto3" json:"chg_type,omitempty"`
	PriceChg        float64 `protobuf:"fixed64,14,opt,name=price_chg,json=priceChg,proto3" json:"price_chg,omitempty"`
	PctChg          float64 `protobuf:"fixed64,15,opt,name=pct_chg,json=pctChg,proto3" json:"pct_chg,omitempty"`
	BidSideTotalVol int64   `protobuf:"varint,16,opt,name=bid_side_total_vol,json=bidSideTotalVol,proto3" json:"bid_side_total_vol,omitempty"`
	AskSideTotalVol int64   `protobuf:"varint,17,opt,name=ask_side_total_vol,json=askSideTotalVol,proto3" json:"ask_side_total_vol,omitempty"`
	BidSideTotalCnt int64   `protobuf:"varint,18,opt,name=bid_side_total_cnt,json=bidSideTotalCnt,proto3" json:"bid_side_total_cnt,omitempty"`
	AskSideTotalCnt int64   `protobuf:"varint,19,opt,name=ask_side_total_cnt,json=askSideTotalCnt,proto3" json:"ask_side_total_cnt,omitempty"`
	Suspend         int64   `protobuf:"varint,20,opt,name=suspend,proto3" json:"suspend,omitempty"`
	Simtrade        int64   `protobuf:"varint,21,opt,name=simtrade,proto3" json:"simtrade,omitempty"`
}

func (x *StreamTickProto_TickData) Reset() {
	*x = StreamTickProto_TickData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTickProto_TickData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTickProto_TickData) ProtoMessage() {}

func (x *StreamTickProto_TickData) ProtoReflect() protoreflect.Message {
	mi := &file_trade_bot_protobuf_src_sinopac_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTickProto_TickData.ProtoReflect.Descriptor instead.
func (*StreamTickProto_TickData) Descriptor() ([]byte, []int) {
	return file_trade_bot_protobuf_src_sinopac_proto_rawDescGZIP(), []int{7, 0}
}

func (x *StreamTickProto_TickData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StreamTickProto_TickData) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

func (x *StreamTickProto_TickData) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *StreamTickProto_TickData) GetAvgPrice() float64 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *StreamTickProto_TickData) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *StreamTickProto_TickData) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *StreamTickProto_TickData) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *StreamTickProto_TickData) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *StreamTickProto_TickData) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *StreamTickProto_TickData) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *StreamTickProto_TickData) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *StreamTickProto_TickData) GetTickType() int64 {
	if x != nil {
		return x.TickType
	}
	return 0
}

func (x *StreamTickProto_TickData) GetChgType() int64 {
	if x != nil {
		return x.ChgType
	}
	return 0
}

func (x *StreamTickProto_TickData) GetPriceChg() float64 {
	if x != nil {
		return x.PriceChg
	}
	return 0
}

func (x *StreamTickProto_TickData) GetPctChg() float64 {
	if x != nil {
		return x.PctChg
	}
	return 0
}

func (x *StreamTickProto_TickData) GetBidSideTotalVol() int64 {
	if x != nil {
		return x.BidSideTotalVol
	}
	return 0
}

func (x *StreamTickProto_TickData) GetAskSideTotalVol() int64 {
	if x != nil {
		return x.AskSideTotalVol
	}
	return 0
}

func (x *StreamTickProto_TickData) GetBidSideTotalCnt() int64 {
	if x != nil {
		return x.BidSideTotalCnt
	}
	return 0
}

func (x *StreamTickProto_TickData) GetAskSideTotalCnt() int64 {
	if x != nil {
		return x.AskSideTotalCnt
	}
	return 0
}

func (x *StreamTickProto_TickData) GetSuspend() int64 {
	if x != nil {
		return x.Suspend
	}
	return 0
}

func (x *StreamTickProto_TickData) GetSimtrade() int64 {
	if x != nil {
		return x.Simtrade
	}
	return 0
}

var File_trade_bot_protobuf_src_sinopac_proto protoreflect.FileDescriptor

var file_trade_bot_protobuf_src_sinopac_proto_rawDesc = []byte{
	0x0a, 0x24, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22, 0x9e, 0x03, 0x0a, 0x0b, 0x42, 0x69, 0x64,
	0x41, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x62, 0x69, 0x64, 0x5f, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x06, 0x62, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x1a, 0xaf, 0x02, 0x0a, 0x0a, 0x42, 0x69, 0x64, 0x41,
	0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x62, 0x69, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x62, 0x69, 0x64, 0x5f,
	0x76, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x42,
	0x69, 0x64, 0x56, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x6f,
	0x6c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x41, 0x73, 0x6b,
	0x56, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x69, 0x6d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x69, 0x6d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x22, 0x4b, 0x0a, 0x12, 0x45, 0x6e, 0x74,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x41, 0x72, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe4, 0x01, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x69, 0x72,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x69, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x69, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3f, 0x0a,
	0x0c, 0x4b, 0x62, 0x61, 0x72, 0x41, 0x72, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2f, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x69,
	0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4b,
	0x62, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x83,
	0x01, 0x0a, 0x09, 0x4b, 0x62, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x69, 0x67, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x48, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f,
	0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x4c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x10, 0x53, 0x6e, 0x61, 0x70, 0x53, 0x68, 0x6f, 0x74,
	0x41, 0x72, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x53, 0x68,
	0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x86, 0x05,
	0x0a, 0x0d, 0x53, 0x6e, 0x61, 0x70, 0x53, 0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f,
	0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61,
	0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x75, 0x79, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x75, 0x79, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0xe6, 0x05, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x54, 0x69, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x69,
	0x63, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x1a, 0xf6, 0x04, 0x0a, 0x08, 0x54, 0x69, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x76, 0x67,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x69, 0x67, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f,
	0x77, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x67, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x67, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70,
	0x63, 0x74, 0x43, 0x68, 0x67, 0x12, 0x2b, 0x0a, 0x12, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x64,
	0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x62, 0x69, 0x64, 0x53, 0x69, 0x64, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56,
	0x6f, 0x6c, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x61, 0x73, 0x6b, 0x53, 0x69, 0x64, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x12,
	0x2b, 0x0a, 0x12, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x62, 0x69, 0x64,
	0x53, 0x69, 0x64, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12,
	0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x64,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x6d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x22,
	0x72, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x41, 0x72, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70,
	0x61, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xb7, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4b, 0x0a, 0x12,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x72, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x94, 0x06, 0x0a, 0x0f, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69,
	0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74,
	0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x64, 0x61, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x42, 0x10, 0x5a, 0x0e, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trade_bot_protobuf_src_sinopac_proto_rawDescOnce sync.Once
	file_trade_bot_protobuf_src_sinopac_proto_rawDescData = file_trade_bot_protobuf_src_sinopac_proto_rawDesc
)

func file_trade_bot_protobuf_src_sinopac_proto_rawDescGZIP() []byte {
	file_trade_bot_protobuf_src_sinopac_proto_rawDescOnce.Do(func() {
		file_trade_bot_protobuf_src_sinopac_proto_rawDescData = protoimpl.X.CompressGZIP(file_trade_bot_protobuf_src_sinopac_proto_rawDescData)
	})
	return file_trade_bot_protobuf_src_sinopac_proto_rawDescData
}

var file_trade_bot_protobuf_src_sinopac_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_trade_bot_protobuf_src_sinopac_proto_goTypes = []interface{}{
	(*BidAskProto)(nil),              // 0: sinopac_protobuf.BidAskProto
	(*EntireTickArrProto)(nil),       // 1: sinopac_protobuf.EntireTickArrProto
	(*EntireTickProto)(nil),          // 2: sinopac_protobuf.EntireTickProto
	(*KbarArrProto)(nil),             // 3: sinopac_protobuf.KbarArrProto
	(*KbarProto)(nil),                // 4: sinopac_protobuf.KbarProto
	(*SnapShotArrProto)(nil),         // 5: sinopac_protobuf.SnapShotArrProto
	(*SnapShotProto)(nil),            // 6: sinopac_protobuf.SnapShotProto
	(*StreamTickProto)(nil),          // 7: sinopac_protobuf.StreamTickProto
	(*EventProto)(nil),               // 8: sinopac_protobuf.EventProto
	(*TradeRecordArrProto)(nil),      // 9: sinopac_protobuf.TradeRecordArrProto
	(*TradeRecordProto)(nil),         // 10: sinopac_protobuf.TradeRecordProto
	(*VolumeRankArrProto)(nil),       // 11: sinopac_protobuf.VolumeRankArrProto
	(*VolumeRankProto)(nil),          // 12: sinopac_protobuf.VolumeRankProto
	(*BidAskProto_BidAskData)(nil),   // 13: sinopac_protobuf.BidAskProto.BidAskData
	(*StreamTickProto_TickData)(nil), // 14: sinopac_protobuf.StreamTickProto.TickData
}
var file_trade_bot_protobuf_src_sinopac_proto_depIdxs = []int32{
	13, // 0: sinopac_protobuf.BidAskProto.bid_ask:type_name -> sinopac_protobuf.BidAskProto.BidAskData
	2,  // 1: sinopac_protobuf.EntireTickArrProto.data:type_name -> sinopac_protobuf.EntireTickProto
	4,  // 2: sinopac_protobuf.KbarArrProto.data:type_name -> sinopac_protobuf.KbarProto
	6,  // 3: sinopac_protobuf.SnapShotArrProto.data:type_name -> sinopac_protobuf.SnapShotProto
	14, // 4: sinopac_protobuf.StreamTickProto.tick:type_name -> sinopac_protobuf.StreamTickProto.TickData
	10, // 5: sinopac_protobuf.TradeRecordArrProto.data:type_name -> sinopac_protobuf.TradeRecordProto
	12, // 6: sinopac_protobuf.VolumeRankArrProto.data:type_name -> sinopac_protobuf.VolumeRankProto
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_trade_bot_protobuf_src_sinopac_proto_init() }
func file_trade_bot_protobuf_src_sinopac_proto_init() {
	if File_trade_bot_protobuf_src_sinopac_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trade_bot_protobuf_src_sinopac_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidAskProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_bot_protobuf_src_sinopac_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntireTickArrProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_bot_protobuf_src_sinopac_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntireTickProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_bot_protobuf_src_sinopac_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KbarArrProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_bot_protobuf_src_sinopac_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KbarProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_bot_protobuf_src_sinopac_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapShotArrProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_bot_protobuf_src_sinopac_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapShotProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_bot_protobuf_src_sinopac_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamTickProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_bot_protobuf_src_sinopac_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_bot_protobuf_src_sinopac_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRecordArrProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_bot_protobuf_src_sinopac_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRecordProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_bot_protobuf_src_sinopac_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeRankArrProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_bot_protobuf_src_sinopac_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeRankProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_bot_protobuf_src_sinopac_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidAskProto_BidAskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_bot_protobuf_src_sinopac_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamTickProto_TickData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trade_bot_protobuf_src_sinopac_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trade_bot_protobuf_src_sinopac_proto_goTypes,
		DependencyIndexes: file_trade_bot_protobuf_src_sinopac_proto_depIdxs,
		MessageInfos:      file_trade_bot_protobuf_src_sinopac_proto_msgTypes,
	}.Build()
	File_trade_bot_protobuf_src_sinopac_proto = out.File
	file_trade_bot_protobuf_src_sinopac_proto_rawDesc = nil
	file_trade_bot_protobuf_src_sinopac_proto_goTypes = nil
	file_trade_bot_protobuf_src_sinopac_proto_depIdxs = nil
}
